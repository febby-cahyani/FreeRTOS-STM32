
RTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006250  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006530  08006530  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006530  08006530  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006530  08006530  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006534  08006534  00007534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006538  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e40  20000060  08006598  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea0  08006598  00008ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ae2  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345d  00000000  00000000  0001fb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00022fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcf  00000000  00000000  00024410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000315e  00000000  00000000  000253df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017275  00000000  00000000  0002853d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e2d  00000000  00000000  0003f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d85df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e4  00000000  00000000  000d8624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000de008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006348 	.word	0x08006348

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006348 	.word	0x08006348

08000150 <Light_LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Light_LED(){
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	if(x_val < 4096/6){
 8000154:	4b5c      	ldr	r3, [pc, #368]	@ (80002c8 <Light_LED+0x178>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800015c:	4293      	cmp	r3, r2
 800015e:	dc19      	bgt.n	8000194 <Light_LED+0x44>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000160:	2201      	movs	r2, #1
 8000162:	2120      	movs	r1, #32
 8000164:	4859      	ldr	r0, [pc, #356]	@ (80002cc <Light_LED+0x17c>)
 8000166:	f001 fc3e 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	2140      	movs	r1, #64	@ 0x40
 800016e:	4857      	ldr	r0, [pc, #348]	@ (80002cc <Light_LED+0x17c>)
 8000170:	f001 fc39 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	2180      	movs	r1, #128	@ 0x80
 8000178:	4854      	ldr	r0, [pc, #336]	@ (80002cc <Light_LED+0x17c>)
 800017a:	f001 fc34 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	2101      	movs	r1, #1
 8000182:	4853      	ldr	r0, [pc, #332]	@ (80002d0 <Light_LED+0x180>)
 8000184:	f001 fc2f 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	2102      	movs	r1, #2
 800018c:	4850      	ldr	r0, [pc, #320]	@ (80002d0 <Light_LED+0x180>)
 800018e:	f001 fc2a 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
	}
}
 8000192:	e097      	b.n	80002c4 <Light_LED+0x174>
	} else if(x_val < 4096*2/6){
 8000194:	4b4c      	ldr	r3, [pc, #304]	@ (80002c8 <Light_LED+0x178>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f240 5254 	movw	r2, #1364	@ 0x554
 800019c:	4293      	cmp	r3, r2
 800019e:	dc19      	bgt.n	80001d4 <Light_LED+0x84>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2120      	movs	r1, #32
 80001a4:	4849      	ldr	r0, [pc, #292]	@ (80002cc <Light_LED+0x17c>)
 80001a6:	f001 fc1e 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80001aa:	2201      	movs	r2, #1
 80001ac:	2140      	movs	r1, #64	@ 0x40
 80001ae:	4847      	ldr	r0, [pc, #284]	@ (80002cc <Light_LED+0x17c>)
 80001b0:	f001 fc19 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2180      	movs	r1, #128	@ 0x80
 80001b8:	4844      	ldr	r0, [pc, #272]	@ (80002cc <Light_LED+0x17c>)
 80001ba:	f001 fc14 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80001be:	2201      	movs	r2, #1
 80001c0:	2101      	movs	r1, #1
 80001c2:	4843      	ldr	r0, [pc, #268]	@ (80002d0 <Light_LED+0x180>)
 80001c4:	f001 fc0f 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2102      	movs	r1, #2
 80001cc:	4840      	ldr	r0, [pc, #256]	@ (80002d0 <Light_LED+0x180>)
 80001ce:	f001 fc0a 	bl	80019e6 <HAL_GPIO_WritePin>
}
 80001d2:	e077      	b.n	80002c4 <Light_LED+0x174>
	} else if(x_val < 4096*3/6){
 80001d4:	4b3c      	ldr	r3, [pc, #240]	@ (80002c8 <Light_LED+0x178>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80001dc:	da19      	bge.n	8000212 <Light_LED+0xc2>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	2120      	movs	r1, #32
 80001e2:	483a      	ldr	r0, [pc, #232]	@ (80002cc <Light_LED+0x17c>)
 80001e4:	f001 fbff 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2140      	movs	r1, #64	@ 0x40
 80001ec:	4837      	ldr	r0, [pc, #220]	@ (80002cc <Light_LED+0x17c>)
 80001ee:	f001 fbfa 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2180      	movs	r1, #128	@ 0x80
 80001f6:	4835      	ldr	r0, [pc, #212]	@ (80002cc <Light_LED+0x17c>)
 80001f8:	f001 fbf5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2101      	movs	r1, #1
 8000200:	4833      	ldr	r0, [pc, #204]	@ (80002d0 <Light_LED+0x180>)
 8000202:	f001 fbf0 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2102      	movs	r1, #2
 800020a:	4831      	ldr	r0, [pc, #196]	@ (80002d0 <Light_LED+0x180>)
 800020c:	f001 fbeb 	bl	80019e6 <HAL_GPIO_WritePin>
}
 8000210:	e058      	b.n	80002c4 <Light_LED+0x174>
	} else if(x_val < 4096*4/6){
 8000212:	4b2d      	ldr	r3, [pc, #180]	@ (80002c8 <Light_LED+0x178>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 800021a:	4293      	cmp	r3, r2
 800021c:	dc19      	bgt.n	8000252 <Light_LED+0x102>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	2120      	movs	r1, #32
 8000222:	482a      	ldr	r0, [pc, #168]	@ (80002cc <Light_LED+0x17c>)
 8000224:	f001 fbdf 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	2140      	movs	r1, #64	@ 0x40
 800022c:	4827      	ldr	r0, [pc, #156]	@ (80002cc <Light_LED+0x17c>)
 800022e:	f001 fbda 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2180      	movs	r1, #128	@ 0x80
 8000236:	4825      	ldr	r0, [pc, #148]	@ (80002cc <Light_LED+0x17c>)
 8000238:	f001 fbd5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2101      	movs	r1, #1
 8000240:	4823      	ldr	r0, [pc, #140]	@ (80002d0 <Light_LED+0x180>)
 8000242:	f001 fbd0 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2102      	movs	r1, #2
 800024a:	4821      	ldr	r0, [pc, #132]	@ (80002d0 <Light_LED+0x180>)
 800024c:	f001 fbcb 	bl	80019e6 <HAL_GPIO_WritePin>
}
 8000250:	e038      	b.n	80002c4 <Light_LED+0x174>
	} else if(x_val < 4096*5/6){
 8000252:	4b1d      	ldr	r3, [pc, #116]	@ (80002c8 <Light_LED+0x178>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f640 5254 	movw	r2, #3412	@ 0xd54
 800025a:	4293      	cmp	r3, r2
 800025c:	dc19      	bgt.n	8000292 <Light_LED+0x142>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	2120      	movs	r1, #32
 8000262:	481a      	ldr	r0, [pc, #104]	@ (80002cc <Light_LED+0x17c>)
 8000264:	f001 fbbf 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	2140      	movs	r1, #64	@ 0x40
 800026c:	4817      	ldr	r0, [pc, #92]	@ (80002cc <Light_LED+0x17c>)
 800026e:	f001 fbba 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2180      	movs	r1, #128	@ 0x80
 8000276:	4815      	ldr	r0, [pc, #84]	@ (80002cc <Light_LED+0x17c>)
 8000278:	f001 fbb5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2101      	movs	r1, #1
 8000280:	4813      	ldr	r0, [pc, #76]	@ (80002d0 <Light_LED+0x180>)
 8000282:	f001 fbb0 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	2102      	movs	r1, #2
 800028a:	4811      	ldr	r0, [pc, #68]	@ (80002d0 <Light_LED+0x180>)
 800028c:	f001 fbab 	bl	80019e6 <HAL_GPIO_WritePin>
}
 8000290:	e018      	b.n	80002c4 <Light_LED+0x174>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2120      	movs	r1, #32
 8000296:	480d      	ldr	r0, [pc, #52]	@ (80002cc <Light_LED+0x17c>)
 8000298:	f001 fba5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800029c:	2200      	movs	r2, #0
 800029e:	2140      	movs	r1, #64	@ 0x40
 80002a0:	480a      	ldr	r0, [pc, #40]	@ (80002cc <Light_LED+0x17c>)
 80002a2:	f001 fba0 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2180      	movs	r1, #128	@ 0x80
 80002aa:	4808      	ldr	r0, [pc, #32]	@ (80002cc <Light_LED+0x17c>)
 80002ac:	f001 fb9b 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2101      	movs	r1, #1
 80002b4:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <Light_LED+0x180>)
 80002b6:	f001 fb96 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2102      	movs	r1, #2
 80002be:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <Light_LED+0x180>)
 80002c0:	f001 fb91 	bl	80019e6 <HAL_GPIO_WritePin>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000114 	.word	0x20000114
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <Tf_LED>:

void Tf_LED(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002d8:	2201      	movs	r2, #1
 80002da:	2120      	movs	r1, #32
 80002dc:	480c      	ldr	r0, [pc, #48]	@ (8000310 <Tf_LED+0x3c>)
 80002de:	f001 fb82 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2140      	movs	r1, #64	@ 0x40
 80002e6:	480a      	ldr	r0, [pc, #40]	@ (8000310 <Tf_LED+0x3c>)
 80002e8:	f001 fb7d 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2180      	movs	r1, #128	@ 0x80
 80002f0:	4807      	ldr	r0, [pc, #28]	@ (8000310 <Tf_LED+0x3c>)
 80002f2:	f001 fb78 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2101      	movs	r1, #1
 80002fa:	4806      	ldr	r0, [pc, #24]	@ (8000314 <Tf_LED+0x40>)
 80002fc:	f001 fb73 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	2102      	movs	r1, #2
 8000304:	4803      	ldr	r0, [pc, #12]	@ (8000314 <Tf_LED+0x40>)
 8000306:	f001 fb6e 	bl	80019e6 <HAL_GPIO_WritePin>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010800 	.word	0x40010800
 8000314:	40010c00 	.word	0x40010c00

08000318 <Menu_Display>:

void Menu_Display(){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
	char buffer[20] = " ";
 800031e:	2320      	movs	r3, #32
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
	sprintf(buffer, "Voltage = %\d\r\n", x_val);
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <Menu_Display+0x3c>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4908      	ldr	r1, [pc, #32]	@ (8000358 <Menu_Display+0x40>)
 8000338:	4618      	mov	r0, r3
 800033a:	f005 faff 	bl	800593c <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 20);
 800033e:	1d39      	adds	r1, r7, #4
 8000340:	2314      	movs	r3, #20
 8000342:	2214      	movs	r2, #20
 8000344:	4805      	ldr	r0, [pc, #20]	@ (800035c <Menu_Display+0x44>)
 8000346:	f002 fbad 	bl	8002aa4 <HAL_UART_Transmit>
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000114 	.word	0x20000114
 8000358:	080063a8 	.word	0x080063a8
 800035c:	200000ac 	.word	0x200000ac

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fc3a 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f852 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 f914 	bl	8000598 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000370:	f000 f8aa 	bl	80004c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000374:	f000 f8e6 	bl	8000544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000378:	f002 fda6 	bl	8002ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800037c:	4a15      	ldr	r2, [pc, #84]	@ (80003d4 <main+0x74>)
 800037e:	2100      	movs	r1, #0
 8000380:	4815      	ldr	r0, [pc, #84]	@ (80003d8 <main+0x78>)
 8000382:	f002 fe07 	bl	8002f94 <osThreadNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <main+0x7c>)
 800038a:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <main+0x80>)
 800038e:	2100      	movs	r1, #0
 8000390:	4814      	ldr	r0, [pc, #80]	@ (80003e4 <main+0x84>)
 8000392:	f002 fdff 	bl	8002f94 <osThreadNew>
 8000396:	4603      	mov	r3, r0
 8000398:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <main+0x88>)
 800039a:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 800039c:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <main+0x8c>)
 800039e:	2100      	movs	r1, #0
 80003a0:	4813      	ldr	r0, [pc, #76]	@ (80003f0 <main+0x90>)
 80003a2:	f002 fdf7 	bl	8002f94 <osThreadNew>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <main+0x94>)
 80003aa:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80003ac:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <main+0x98>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	4812      	ldr	r0, [pc, #72]	@ (80003fc <main+0x9c>)
 80003b2:	f002 fdef 	bl	8002f94 <osThreadNew>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <main+0xa0>)
 80003ba:	6013      	str	r3, [r2, #0]

  /* creation of LEDLevelTask */
  LEDLevelTaskHandle = osThreadNew(LEDLevel, NULL, &LEDLevelTask_attributes);
 80003bc:	4a11      	ldr	r2, [pc, #68]	@ (8000404 <main+0xa4>)
 80003be:	2100      	movs	r1, #0
 80003c0:	4811      	ldr	r0, [pc, #68]	@ (8000408 <main+0xa8>)
 80003c2:	f002 fde7 	bl	8002f94 <osThreadNew>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4a10      	ldr	r2, [pc, #64]	@ (800040c <main+0xac>)
 80003ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003cc:	f002 fdae 	bl	8002f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <main+0x70>
 80003d4:	08006408 	.word	0x08006408
 80003d8:	08000671 	.word	0x08000671
 80003dc:	200000f4 	.word	0x200000f4
 80003e0:	0800642c 	.word	0x0800642c
 80003e4:	08000681 	.word	0x08000681
 80003e8:	200000f8 	.word	0x200000f8
 80003ec:	08006450 	.word	0x08006450
 80003f0:	080006e9 	.word	0x080006e9
 80003f4:	200000fc 	.word	0x200000fc
 80003f8:	08006474 	.word	0x08006474
 80003fc:	08000725 	.word	0x08000725
 8000400:	20000100 	.word	0x20000100
 8000404:	08006498 	.word	0x08006498
 8000408:	080007f5 	.word	0x080007f5
 800040c:	20000104 	.word	0x20000104

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	@ 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800041a:	2228      	movs	r2, #40	@ 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f005 faac 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000440:	2301      	movs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fad6 	bl	8001a18 <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000472:	f000 f9e9 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fd42 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800049e:	f000 f9d3 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a2:	2302      	movs	r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fef2 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004ba:	f000 f9c5 	bl	8000848 <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3750      	adds	r7, #80	@ 0x50
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_ADC1_Init+0x74>)
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <MX_ADC1_Init+0x78>)
 80004dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004de:	4b17      	ldr	r3, [pc, #92]	@ (800053c <MX_ADC1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_ADC1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_ADC1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_ADC1_Init+0x74>)
 80004f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f8:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_ADC1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_ADC1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000504:	480d      	ldr	r0, [pc, #52]	@ (800053c <MX_ADC1_Init+0x74>)
 8000506:	f000 fb9b 	bl	8000c40 <HAL_ADC_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000510:	f000 f99a 	bl	8000848 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000518:	2301      	movs	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_ADC1_Init+0x74>)
 8000526:	f000 fe4f 	bl	80011c8 <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000530:	f000 f98a 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000007c 	.word	0x2000007c
 8000540:	40012400 	.word	0x40012400

08000544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <MX_USART1_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_USART1_UART_Init+0x4c>)
 800057c:	f002 fa42 	bl	8002a04 <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000586:	f000 f95f 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000ac 	.word	0x200000ac
 8000594:	40013800 	.word	0x40013800

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a26      	ldr	r2, [pc, #152]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_GPIO_Init+0xcc>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	21e0      	movs	r1, #224	@ 0xe0
 80005f8:	481b      	ldr	r0, [pc, #108]	@ (8000668 <MX_GPIO_Init+0xd0>)
 80005fa:	f001 f9f4 	bl	80019e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2103      	movs	r1, #3
 8000602:	481a      	ldr	r0, [pc, #104]	@ (800066c <MX_GPIO_Init+0xd4>)
 8000604:	f001 f9ef 	bl	80019e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000608:	23e0      	movs	r3, #224	@ 0xe0
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_GPIO_Init+0xd0>)
 8000620:	f001 f846 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin;
 8000624:	2303      	movs	r3, #3
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	480c      	ldr	r0, [pc, #48]	@ (800066c <MX_GPIO_Init+0xd4>)
 800063c:	f001 f838 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000640:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_GPIO_Init+0xd4>)
 8000656:	f001 f82b 	bl	80016b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800
 800066c:	40010c00 	.word	0x40010c00

08000670 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f002 fd35 	bl	80030e8 <osDelay>
 800067e:	e7fb      	b.n	8000678 <StartDefaultTask+0x8>

08000680 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)== GPIO_PIN_RESET)
 8000688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <pickButton+0x5c>)
 800068e:	f001 f993 	bl	80019b8 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <pickButton+0x28>
	  {
		  osDelay(300);
 8000698:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800069c:	f002 fd24 	bl	80030e8 <osDelay>
		  button1_pressed = 1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <pickButton+0x60>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e002      	b.n	80006ae <pickButton+0x2e>
	  } else {
		  button1_pressed = 0;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <pickButton+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	  }
	  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)==GPIO_PIN_RESET)
 80006ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b2:	480a      	ldr	r0, [pc, #40]	@ (80006dc <pickButton+0x5c>)
 80006b4:	f001 f980 	bl	80019b8 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d107      	bne.n	80006ce <pickButton+0x4e>
	  {
		  osDelay(300);
 80006be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006c2:	f002 fd11 	bl	80030e8 <osDelay>
		  button2_pressed = 1;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <pickButton+0x64>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	e002      	b.n	80006d4 <pickButton+0x54>
	  } else {
		  button2_pressed = 0;
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <pickButton+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(100);
 80006d4:	2064      	movs	r0, #100	@ 0x64
 80006d6:	f002 fd07 	bl	80030e8 <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)== GPIO_PIN_RESET)
 80006da:	e7d5      	b.n	8000688 <pickButton+0x8>
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	2000010c 	.word	0x2000010c
 80006e4:	20000110 	.word	0x20000110

080006e8 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <getADC+0x34>)
 80006f2:	f000 fb7d 	bl	8000df0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80006f6:	210a      	movs	r1, #10
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <getADC+0x34>)
 80006fa:	f000 fc53 	bl	8000fa4 <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <getADC+0x34>)
 8000700:	f000 fd56 	bl	80011b0 <HAL_ADC_GetValue>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <getADC+0x38>)
 800070a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <getADC+0x34>)
 800070e:	f000 fc1d 	bl	8000f4c <HAL_ADC_Stop>
	  osDelay(100);
 8000712:	2064      	movs	r0, #100	@ 0x64
 8000714:	f002 fce8 	bl	80030e8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000718:	bf00      	nop
 800071a:	e7e9      	b.n	80006f0 <getADC+0x8>
 800071c:	2000007c 	.word	0x2000007c
 8000720:	20000114 	.word	0x20000114

08000724 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
  /* Infinite loop */
	Menu_Display();
 800072c:	f7ff fdf4 	bl	8000318 <Menu_Display>
	char buffer2[20] = "_";
 8000730:	235f      	movs	r3, #95	@ 0x5f
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
	for(;;)
  {
	  if(HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10)== HAL_OK)
 8000742:	230a      	movs	r3, #10
 8000744:	2201      	movs	r2, #1
 8000746:	4922      	ldr	r1, [pc, #136]	@ (80007d0 <dispUART+0xac>)
 8000748:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <dispUART+0xb0>)
 800074a:	f002 fa2e 	bl	8002baa <HAL_UART_Receive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d11f      	bne.n	8000794 <dispUART+0x70>
	  {
		  switch (choice){
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <dispUART+0xac>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b31      	cmp	r3, #49	@ 0x31
 800075a:	d002      	beq.n	8000762 <dispUART+0x3e>
 800075c:	2b32      	cmp	r3, #50	@ 0x32
 800075e:	d010      	beq.n	8000782 <dispUART+0x5e>
		  case '2':
			  HAL_UART_Transmit(&huart1, (uint8_t*)	"HELLO WORLD\r\n", sizeof("HELLO WORLD\r\n")-1, 10);
			  Menu_Display();
			  break;
		  default:
			  break;;
 8000760:	e018      	b.n	8000794 <dispUART+0x70>
			  sprintf(buffer2, "Voltage = %d\r\n", x_val);
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <dispUART+0xb4>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	491c      	ldr	r1, [pc, #112]	@ (80007dc <dispUART+0xb8>)
 800076c:	4618      	mov	r0, r3
 800076e:	f005 f8e5 	bl	800593c <siprintf>
			  HAL_UART_Transmit(&huart1, buffer2, sizeof(buffer2), 20);
 8000772:	f107 010c 	add.w	r1, r7, #12
 8000776:	2314      	movs	r3, #20
 8000778:	2214      	movs	r2, #20
 800077a:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <dispUART+0xb0>)
 800077c:	f002 f992 	bl	8002aa4 <HAL_UART_Transmit>
			  break;
 8000780:	e008      	b.n	8000794 <dispUART+0x70>
			  HAL_UART_Transmit(&huart1, (uint8_t*)	"HELLO WORLD\r\n", sizeof("HELLO WORLD\r\n")-1, 10);
 8000782:	230a      	movs	r3, #10
 8000784:	220d      	movs	r2, #13
 8000786:	4916      	ldr	r1, [pc, #88]	@ (80007e0 <dispUART+0xbc>)
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <dispUART+0xb0>)
 800078a:	f002 f98b 	bl	8002aa4 <HAL_UART_Transmit>
			  Menu_Display();
 800078e:	f7ff fdc3 	bl	8000318 <Menu_Display>
			  break;
 8000792:	bf00      	nop
		  }
	  } else {

	  }
	  if(button1_pressed)
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <dispUART+0xc0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <dispUART+0x8a>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 Pressed\r\n", sizeof("Button1 Pressed\r\n"), 10);
 800079c:	230a      	movs	r3, #10
 800079e:	2212      	movs	r2, #18
 80007a0:	4911      	ldr	r1, [pc, #68]	@ (80007e8 <dispUART+0xc4>)
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <dispUART+0xb0>)
 80007a4:	f002 f97e 	bl	8002aa4 <HAL_UART_Transmit>
		  button1_pressed = 0;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <dispUART+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
	  }
	  if(button2_pressed)
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <dispUART+0xc8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <dispUART+0xa4>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 Pressed\r\n", sizeof("Button2 Pressed\r\n"), 10);
 80007b6:	230a      	movs	r3, #10
 80007b8:	2212      	movs	r2, #18
 80007ba:	490d      	ldr	r1, [pc, #52]	@ (80007f0 <dispUART+0xcc>)
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <dispUART+0xb0>)
 80007be:	f002 f971 	bl	8002aa4 <HAL_UART_Transmit>
		  button2_pressed = 0;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <dispUART+0xc8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(100);
 80007c8:	2064      	movs	r0, #100	@ 0x64
 80007ca:	f002 fc8d 	bl	80030e8 <osDelay>
	  if(HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10)== HAL_OK)
 80007ce:	e7b8      	b.n	8000742 <dispUART+0x1e>
 80007d0:	20000108 	.word	0x20000108
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	20000114 	.word	0x20000114
 80007dc:	080063a8 	.word	0x080063a8
 80007e0:	080063b8 	.word	0x080063b8
 80007e4:	2000010c 	.word	0x2000010c
 80007e8:	080063c8 	.word	0x080063c8
 80007ec:	20000110 	.word	0x20000110
 80007f0:	080063dc 	.word	0x080063dc

080007f4 <LEDLevel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDLevel */
void LEDLevel(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDLevel */
  /* Infinite loop */
  while(1)
  {
	  if(button1_pressed==1){
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <LEDLevel+0x2c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10a      	bne.n	800081a <LEDLevel+0x26>
		  Light_LED();
 8000804:	f7ff fca4 	bl	8000150 <Light_LED>
		  osDelay(100);
 8000808:	2064      	movs	r0, #100	@ 0x64
 800080a:	f002 fc6d 	bl	80030e8 <osDelay>
		  Tf_LED();
 800080e:	f7ff fd61 	bl	80002d4 <Tf_LED>
		  osDelay(100);
 8000812:	2064      	movs	r0, #100	@ 0x64
 8000814:	f002 fc68 	bl	80030e8 <osDelay>
 8000818:	e7f0      	b.n	80007fc <LEDLevel+0x8>
	  }
	  else Light_LED();
 800081a:	f7ff fc99 	bl	8000150 <Light_LED>
	  if(button1_pressed==1){
 800081e:	e7ed      	b.n	80007fc <LEDLevel+0x8>
 8000820:	2000010c 	.word	0x2000010c

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f9e7 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40000800 	.word	0x40000800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_MspInit+0x68>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <HAL_MspInit+0x68>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_MspInit+0x68>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_MspInit+0x68>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <HAL_MspInit+0x68>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_MspInit+0x68>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 fee2 	bl	800165a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <HAL_MspInit+0x6c>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_MspInit+0x6c>)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010000 	.word	0x40010000

080008c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a14      	ldr	r2, [pc, #80]	@ (8000930 <HAL_ADC_MspInit+0x6c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d121      	bne.n	8000928 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 80008ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_ADC_MspInit+0x70>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_X_Pin;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000918:	2303      	movs	r3, #3
 800091a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_X_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <HAL_ADC_MspInit+0x74>)
 8000924:	f000 fec4 	bl	80016b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40012400 	.word	0x40012400
 8000934:	40021000 	.word	0x40021000
 8000938:	40010800 	.word	0x40010800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <HAL_UART_MspInit+0x8c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d131      	bne.n	80009c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_UART_MspInit+0x90>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a1a      	ldr	r2, [pc, #104]	@ (80009cc <HAL_UART_MspInit+0x90>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x90>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x90>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <HAL_UART_MspInit+0x90>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_UART_MspInit+0x90>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <HAL_UART_MspInit+0x94>)
 80009a2:	f000 fe85 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0x94>)
 80009bc:	f000 fe78 	bl	80016b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013800 	.word	0x40013800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009ea:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <HAL_InitTick+0xe8>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <HAL_InitTick+0xe8>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <HAL_InitTick+0xe8>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a02:	f107 0210 	add.w	r2, r7, #16
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fbf5 	bl	80021fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a1c:	f001 fbc6 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8000a20:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a22:	e004      	b.n	8000a2e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a24:	f001 fbc2 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a30:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <HAL_InitTick+0xf4>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a62:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a64:	f001 fd84 	bl	8002570 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d11b      	bne.n	8000aae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a76:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a78:	f001 fdd2 	bl	8002620 <HAL_TIM_Base_Start_IT>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d111      	bne.n	8000aae <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a8a:	201e      	movs	r0, #30
 8000a8c:	f000 fe01 	bl	8001692 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d808      	bhi.n	8000aa8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a96:	2200      	movs	r2, #0
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	201e      	movs	r0, #30
 8000a9c:	f000 fddd 	bl	800165a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_InitTick+0xf8>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e002      	b.n	8000aae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3738      	adds	r7, #56	@ 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	20000118 	.word	0x20000118
 8000ac8:	40000800 	.word	0x40000800
 8000acc:	20000004 	.word	0x20000004

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <TIM4_IRQHandler+0x10>)
 8000b0a:	f001 fddb 	bl	80026c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000118 	.word	0x20000118

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f004 ff76 	bl	8005a38 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20005000 	.word	0x20005000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	20000160 	.word	0x20000160
 8000b80:	20001ea0 	.word	0x20001ea0

08000b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff fff8 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b96:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b98:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bac:	4c09      	ldr	r4, [pc, #36]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f004 ff43 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fbcf 	bl	8000360 <main>
  bx lr
 8000bc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bcc:	08006538 	.word	0x08006538
  ldr r2, =_sbss
 8000bd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd4:	20001ea0 	.word	0x20001ea0

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 fd29 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff feee 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe2c 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a03      	ldr	r2, [pc, #12]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000164 	.word	0x20000164

08000c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000164 	.word	0x20000164

08000c40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0be      	b.n	8000de0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d109      	bne.n	8000c84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fe20 	bl	80008c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 fbf1 	bl	800146c <ADC_ConversionStop_Disable>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8099 	bne.w	8000dce <HAL_ADC_Init+0x18e>
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8095 	bne.w	8000dce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cac:	f023 0302 	bic.w	r3, r3, #2
 8000cb0:	f043 0202 	orr.w	r2, r3, #2
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7b1b      	ldrb	r3, [r3, #12]
 8000cc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cd8:	d003      	beq.n	8000ce2 <HAL_ADC_Init+0xa2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <HAL_ADC_Init+0xa8>
 8000ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce6:	e000      	b.n	8000cea <HAL_ADC_Init+0xaa>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7d1b      	ldrb	r3, [r3, #20]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d119      	bne.n	8000d2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7b1b      	ldrb	r3, [r3, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	035a      	lsls	r2, r3, #13
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	e00b      	b.n	8000d2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d18:	f043 0220 	orr.w	r2, r3, #32
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <HAL_ADC_Init+0x1a8>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d5c:	d003      	beq.n	8000d66 <HAL_ADC_Init+0x126>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d104      	bne.n	8000d70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	051b      	lsls	r3, r3, #20
 8000d6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_ADC_Init+0x1ac>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d10b      	bne.n	8000dac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000daa:	e018      	b.n	8000dde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db0:	f023 0312 	bic.w	r3, r3, #18
 8000db4:	f043 0210 	orr.w	r2, r3, #16
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc0:	f043 0201 	orr.w	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dcc:	e007      	b.n	8000dde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd2:	f043 0210 	orr.w	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dec:	ff1f0efe 	.word	0xff1f0efe

08000df0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Start+0x1a>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e098      	b.n	8000f3c <HAL_ADC_Start+0x14c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fad0 	bl	80013b8 <ADC_Enable>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8087 	bne.w	8000f32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a41      	ldr	r2, [pc, #260]	@ (8000f44 <HAL_ADC_Start+0x154>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_Start+0x5e>
 8000e42:	4b41      	ldr	r3, [pc, #260]	@ (8000f48 <HAL_ADC_Start+0x158>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d026      	beq.n	8000eb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e78:	e01d      	b.n	8000eb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <HAL_ADC_Start+0x158>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d004      	beq.n	8000e9a <HAL_ADC_Start+0xaa>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <HAL_ADC_Start+0x154>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10d      	bne.n	8000eb6 <HAL_ADC_Start+0xc6>
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <HAL_ADC_Start+0x158>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec6:	f023 0206 	bic.w	r2, r3, #6
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ece:	e002      	b.n	8000ed6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f06f 0202 	mvn.w	r2, #2
 8000ee6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ef2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ef6:	d113      	bne.n	8000f20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_ADC_Start+0x154>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d105      	bne.n	8000f0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_ADC_Start+0x158>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d108      	bne.n	8000f20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	e00c      	b.n	8000f3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e003      	b.n	8000f3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40012800 	.word	0x40012800
 8000f48:	40012400 	.word	0x40012400

08000f4c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Stop+0x1a>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e01a      	b.n	8000f9c <HAL_ADC_Stop+0x50>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa7c 	bl	800146c <ADC_ConversionStop_Disable>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fba:	f7ff fe37 	bl	8000c2c <HAL_GetTick>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	f043 0220 	orr.w	r2, r3, #32
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0d3      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d131      	bne.n	8001058 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d12a      	bne.n	8001058 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001002:	e021      	b.n	8001048 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100a:	d01d      	beq.n	8001048 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_ADC_PollForConversion+0x7e>
 8001012:	f7ff fe0b 	bl	8000c2c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d212      	bcs.n	8001048 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001034:	f043 0204 	orr.w	r2, r3, #4
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e0a2      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0d6      	beq.n	8001004 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001056:	e070      	b.n	800113a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001058:	4b4f      	ldr	r3, [pc, #316]	@ (8001198 <HAL_ADC_PollForConversion+0x1f4>)
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	2002      	movs	r0, #2
 800105e:	f001 f9d1 	bl	8002404 <HAL_RCCEx_GetPeriphCLKFreq>
 8001062:	4603      	mov	r3, r0
 8001064:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6919      	ldr	r1, [r3, #16]
 800106e:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <HAL_ADC_PollForConversion+0x1f8>)
 8001070:	400b      	ands	r3, r1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x104>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68d9      	ldr	r1, [r3, #12]
 800107c:	4b48      	ldr	r3, [pc, #288]	@ (80011a0 <HAL_ADC_PollForConversion+0x1fc>)
 800107e:	400b      	ands	r3, r1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d111      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x104>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6919      	ldr	r1, [r3, #16]
 800108a:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <HAL_ADC_PollForConversion+0x200>)
 800108c:	400b      	ands	r3, r1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d108      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x100>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68d9      	ldr	r1, [r3, #12]
 8001098:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_ADC_PollForConversion+0x204>)
 800109a:	400b      	ands	r3, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x100>
 80010a0:	2314      	movs	r3, #20
 80010a2:	e020      	b.n	80010e6 <HAL_ADC_PollForConversion+0x142>
 80010a4:	2329      	movs	r3, #41	@ 0x29
 80010a6:	e01e      	b.n	80010e6 <HAL_ADC_PollForConversion+0x142>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6919      	ldr	r1, [r3, #16]
 80010ae:	4b3d      	ldr	r3, [pc, #244]	@ (80011a4 <HAL_ADC_PollForConversion+0x200>)
 80010b0:	400b      	ands	r3, r1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_ADC_PollForConversion+0x120>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68d9      	ldr	r1, [r3, #12]
 80010bc:	4b3a      	ldr	r3, [pc, #232]	@ (80011a8 <HAL_ADC_PollForConversion+0x204>)
 80010be:	400b      	ands	r3, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00d      	beq.n	80010e0 <HAL_ADC_PollForConversion+0x13c>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6919      	ldr	r1, [r3, #16]
 80010ca:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <HAL_ADC_PollForConversion+0x208>)
 80010cc:	400b      	ands	r3, r1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d108      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x140>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68d9      	ldr	r1, [r3, #12]
 80010d8:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <HAL_ADC_PollForConversion+0x208>)
 80010da:	400b      	ands	r3, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x140>
 80010e0:	2354      	movs	r3, #84	@ 0x54
 80010e2:	e000      	b.n	80010e6 <HAL_ADC_PollForConversion+0x142>
 80010e4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010ec:	e021      	b.n	8001132 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d01a      	beq.n	800112c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <HAL_ADC_PollForConversion+0x168>
 80010fc:	f7ff fd96 	bl	8000c2c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d20f      	bcs.n	800112c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d90b      	bls.n	800112c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	f043 0204 	orr.w	r2, r3, #4
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e030      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	429a      	cmp	r2, r3
 8001138:	d8d9      	bhi.n	80010ee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f06f 0212 	mvn.w	r2, #18
 8001142:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800115a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800115e:	d115      	bne.n	800118c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000000 	.word	0x20000000
 800119c:	24924924 	.word	0x24924924
 80011a0:	00924924 	.word	0x00924924
 80011a4:	12492492 	.word	0x12492492
 80011a8:	00492492 	.word	0x00492492
 80011ac:	00249249 	.word	0x00249249

080011b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x20>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e0dc      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x1da>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b06      	cmp	r3, #6
 80011f6:	d81c      	bhi.n	8001232 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b05      	subs	r3, #5
 800120a:	221f      	movs	r2, #31
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4019      	ands	r1, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b05      	subs	r3, #5
 8001224:	fa00 f203 	lsl.w	r2, r0, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001230:	e03c      	b.n	80012ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d81c      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	3b23      	subs	r3, #35	@ 0x23
 800124c:	221f      	movs	r2, #31
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	4019      	ands	r1, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3b23      	subs	r3, #35	@ 0x23
 8001266:	fa00 f203 	lsl.w	r2, r0, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
 8001272:	e01b      	b.n	80012ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b41      	subs	r3, #65	@ 0x41
 8001286:	221f      	movs	r2, #31
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	4019      	ands	r1, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b41      	subs	r3, #65	@ 0x41
 80012a0:	fa00 f203 	lsl.w	r2, r0, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d91c      	bls.n	80012ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1e      	subs	r3, #30
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6898      	ldr	r0, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	3b1e      	subs	r3, #30
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	e019      	b.n	8001322 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6919      	ldr	r1, [r3, #16]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	2207      	movs	r2, #7
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6898      	ldr	r0, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d003      	beq.n	8001332 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800132e:	2b11      	cmp	r3, #17
 8001330:	d132      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d125      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d126      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001358:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b10      	cmp	r3, #16
 8001360:	d11a      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	0c9a      	lsrs	r2, r3, #18
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001378:	e002      	b.n	8001380 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <HAL_ADC_ConfigChannel+0x1b2>
 8001386:	e007      	b.n	8001398 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f043 0220 	orr.w	r2, r3, #32
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40012400 	.word	0x40012400
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d040      	beq.n	8001458 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <ADC_Enable+0xac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <ADC_Enable+0xb0>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f4:	e002      	b.n	80013fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f9      	bne.n	80013f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001402:	f7ff fc13 	bl	8000c2c <HAL_GetTick>
 8001406:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001408:	e01f      	b.n	800144a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800140a:	f7ff fc0f 	bl	8000c2c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d918      	bls.n	800144a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b01      	cmp	r3, #1
 8001424:	d011      	beq.n	800144a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e007      	b.n	800145a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d1d8      	bne.n	800140a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83

0800146c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d12e      	bne.n	80014e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001496:	f7ff fbc9 	bl	8000c2c <HAL_GetTick>
 800149a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800149c:	e01b      	b.n	80014d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800149e:	f7ff fbc5 	bl	8000c2c <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d914      	bls.n	80014d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10d      	bne.n	80014d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	f043 0210 	orr.w	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e007      	b.n	80014e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d0dc      	beq.n	800149e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4906      	ldr	r1, [pc, #24]	@ (8001588 <__NVIC_EnableIRQ+0x34>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff4f 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff64 	bl	8001538 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ffb2 	bl	80015e0 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff81 	bl	800158c <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff57 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	@ 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e169      	b.n	8001998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8158 	bne.w	8001992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001950 <HAL_GPIO_Init+0x2a0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d05e      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 80016ec:	4a98      	ldr	r2, [pc, #608]	@ (8001950 <HAL_GPIO_Init+0x2a0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d875      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 80016f2:	4a98      	ldr	r2, [pc, #608]	@ (8001954 <HAL_GPIO_Init+0x2a4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d058      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 80016f8:	4a96      	ldr	r2, [pc, #600]	@ (8001954 <HAL_GPIO_Init+0x2a4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d86f      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 80016fe:	4a96      	ldr	r2, [pc, #600]	@ (8001958 <HAL_GPIO_Init+0x2a8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d052      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 8001704:	4a94      	ldr	r2, [pc, #592]	@ (8001958 <HAL_GPIO_Init+0x2a8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d869      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 800170a:	4a94      	ldr	r2, [pc, #592]	@ (800195c <HAL_GPIO_Init+0x2ac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d04c      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 8001710:	4a92      	ldr	r2, [pc, #584]	@ (800195c <HAL_GPIO_Init+0x2ac>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d863      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 8001716:	4a92      	ldr	r2, [pc, #584]	@ (8001960 <HAL_GPIO_Init+0x2b0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d046      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
 800171c:	4a90      	ldr	r2, [pc, #576]	@ (8001960 <HAL_GPIO_Init+0x2b0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d85d      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 8001722:	2b12      	cmp	r3, #18
 8001724:	d82a      	bhi.n	800177c <HAL_GPIO_Init+0xcc>
 8001726:	2b12      	cmp	r3, #18
 8001728:	d859      	bhi.n	80017de <HAL_GPIO_Init+0x12e>
 800172a:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <HAL_GPIO_Init+0x80>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	080017ab 	.word	0x080017ab
 8001734:	08001785 	.word	0x08001785
 8001738:	08001797 	.word	0x08001797
 800173c:	080017d9 	.word	0x080017d9
 8001740:	080017df 	.word	0x080017df
 8001744:	080017df 	.word	0x080017df
 8001748:	080017df 	.word	0x080017df
 800174c:	080017df 	.word	0x080017df
 8001750:	080017df 	.word	0x080017df
 8001754:	080017df 	.word	0x080017df
 8001758:	080017df 	.word	0x080017df
 800175c:	080017df 	.word	0x080017df
 8001760:	080017df 	.word	0x080017df
 8001764:	080017df 	.word	0x080017df
 8001768:	080017df 	.word	0x080017df
 800176c:	080017df 	.word	0x080017df
 8001770:	080017df 	.word	0x080017df
 8001774:	0800178d 	.word	0x0800178d
 8001778:	080017a1 	.word	0x080017a1
 800177c:	4a79      	ldr	r2, [pc, #484]	@ (8001964 <HAL_GPIO_Init+0x2b4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001782:	e02c      	b.n	80017de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e029      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	3304      	adds	r3, #4
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e024      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	3308      	adds	r3, #8
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e01f      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	330c      	adds	r3, #12
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e01a      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017b2:	2304      	movs	r3, #4
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e013      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	611a      	str	r2, [r3, #16]
          break;
 80017ca:	e009      	b.n	80017e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
          break;
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x130>
          break;
 80017de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2bff      	cmp	r3, #255	@ 0xff
 80017e4:	d801      	bhi.n	80017ea <HAL_GPIO_Init+0x13a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_Init+0x13e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	@ 0xff
 80017f4:	d802      	bhi.n	80017fc <HAL_GPIO_Init+0x14c>
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x152>
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	3b08      	subs	r3, #8
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	210f      	movs	r1, #15
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	6a39      	ldr	r1, [r7, #32]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	431a      	orrs	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80b1 	beq.w	8001992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a4c      	ldr	r2, [pc, #304]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_GPIO_Init+0x2b8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001848:	4a48      	ldr	r2, [pc, #288]	@ (800196c <HAL_GPIO_Init+0x2bc>)
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a40      	ldr	r2, [pc, #256]	@ (8001970 <HAL_GPIO_Init+0x2c0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_GPIO_Init+0x1ec>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3f      	ldr	r2, [pc, #252]	@ (8001974 <HAL_GPIO_Init+0x2c4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1e8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3e      	ldr	r2, [pc, #248]	@ (8001978 <HAL_GPIO_Init+0x2c8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1e4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3d      	ldr	r2, [pc, #244]	@ (800197c <HAL_GPIO_Init+0x2cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1e0>
 800188c:	2303      	movs	r3, #3
 800188e:	e006      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001890:	2304      	movs	r3, #4
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001894:	2302      	movs	r3, #2
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1ee>
 800189c:	2300      	movs	r3, #0
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ae:	492f      	ldr	r1, [pc, #188]	@ (800196c <HAL_GPIO_Init+0x2bc>)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	492c      	ldr	r1, [pc, #176]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4928      	ldr	r1, [pc, #160]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4922      	ldr	r1, [pc, #136]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	491e      	ldr	r1, [pc, #120]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001918:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4918      	ldr	r1, [pc, #96]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d021      	beq.n	8001984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	490e      	ldr	r1, [pc, #56]	@ (8001980 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e021      	b.n	8001992 <HAL_GPIO_Init+0x2e2>
 800194e:	bf00      	nop
 8001950:	10320000 	.word	0x10320000
 8001954:	10310000 	.word	0x10310000
 8001958:	10220000 	.word	0x10220000
 800195c:	10210000 	.word	0x10210000
 8001960:	10120000 	.word	0x10120000
 8001964:	10110000 	.word	0x10110000
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	40010800 	.word	0x40010800
 8001974:	40010c00 	.word	0x40010c00
 8001978:	40011000 	.word	0x40011000
 800197c:	40011400 	.word	0x40011400
 8001980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_GPIO_Init+0x304>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	43db      	mvns	r3, r3
 800198c:	4909      	ldr	r1, [pc, #36]	@ (80019b4 <HAL_GPIO_Init+0x304>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f ae8e 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	372c      	adds	r7, #44	@ 0x2c
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f6:	787b      	ldrb	r3, [r7, #1]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a02:	e003      	b.n	8001a0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e272      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a38:	4b92      	ldr	r3, [pc, #584]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4b8f      	ldr	r3, [pc, #572]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
 8001a50:	4b8c      	ldr	r3, [pc, #560]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b89      	ldr	r3, [pc, #548]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x12c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d168      	bne.n	8001b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e24c      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x76>
 8001a80:	4b80      	ldr	r3, [pc, #512]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7f      	ldr	r2, [pc, #508]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b7b      	ldr	r3, [pc, #492]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b78      	ldr	r3, [pc, #480]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbc>
 8001aba:	4b72      	ldr	r3, [pc, #456]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a71      	ldr	r2, [pc, #452]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6e      	ldr	r2, [pc, #440]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a67      	ldr	r2, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff f89a 	bl	8000c2c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff f896 	bl	8000c2c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e200      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe4>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f886 	bl	8000c2c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff f882 	bl	8000c2c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1ec      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x10c>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c0      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4939      	ldr	r1, [pc, #228]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f83b 	bl	8000c2c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f837 	bl	8000c2c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a1      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4927      	ldr	r1, [pc, #156]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f81a 	bl	8000c2c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f816 	bl	8000c2c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e180      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d03a      	beq.n	8001c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe fffa 	bl	8000c2c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7fe fff6 	bl	8000c2c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e160      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 fafe 	bl	800225c <RCC_Delay>
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7fe ffe0 	bl	8000c2c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7fe ffdc 	bl	8000c2c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e146      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420000 	.word	0x42420000
 8001c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b8b      	ldr	r3, [pc, #556]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a87      	ldr	r2, [pc, #540]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7fe ff9d 	bl	8000c2c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7fe ff99 	bl	8000c2c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	@ 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e103      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x312>
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x334>
 8001d32:	4b6a      	ldr	r3, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a69      	ldr	r2, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a66      	ldr	r2, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x356>
 8001d54:	4b61      	ldr	r3, [pc, #388]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4b5e      	ldr	r3, [pc, #376]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a5d      	ldr	r2, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a5a      	ldr	r2, [pc, #360]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b58      	ldr	r3, [pc, #352]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a57      	ldr	r2, [pc, #348]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ff4d 	bl	8000c2c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe ff49 	bl	8000c2c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0b1      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x37e>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe ff37 	bl	8000c2c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff33 	bl	8000c2c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e09b      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b3c      	ldr	r3, [pc, #240]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8087 	beq.w	8001f0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d061      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d146      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe ff07 	bl	8000c2c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7fe ff03 	bl	8000c2c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e06d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4921      	ldr	r1, [pc, #132]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a19      	ldr	r1, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	491b      	ldr	r1, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fed7 	bl	8000c2c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe fed3 	bl	8000c2c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e03d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46a>
 8001ea0:	e035      	b.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fec0 	bl	8000c2c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe febc 	bl	8000c2c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e026      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x498>
 8001ece:	e01e      	b.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e019      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x500>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b6a      	ldr	r3, [pc, #424]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4965      	ldr	r1, [pc, #404]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4b59      	ldr	r3, [pc, #356]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	494d      	ldr	r1, [pc, #308]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d040      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07f      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e073      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4936      	ldr	r1, [pc, #216]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7fe fe0e 	bl	8000c2c <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fe0a 	bl	8000c2c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e053      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d210      	bcs.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4922      	ldr	r1, [pc, #136]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e032      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4916      	ldr	r1, [pc, #88]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	490e      	ldr	r1, [pc, #56]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 f821 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490a      	ldr	r1, [pc, #40]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fc82 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	080064bc 	.word	0x080064bc
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x30>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x36>
 800211e:	e027      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	613b      	str	r3, [r7, #16]
      break;
 8002124:	e027      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4a17      	ldr	r2, [pc, #92]	@ (800218c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c5b      	lsrs	r3, r3, #17
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e004      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	613b      	str	r3, [r7, #16]
      break;
 800216e:	e002      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	613b      	str	r3, [r7, #16]
      break;
 8002174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002176:	693b      	ldr	r3, [r7, #16]
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	080064d4 	.word	0x080064d4
 8002190:	080064e4 	.word	0x080064e4
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b02      	ldr	r3, [pc, #8]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b0:	f7ff fff2 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080064cc 	.word	0x080064cc

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d8:	f7ff ffde 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0adb      	lsrs	r3, r3, #11
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4903      	ldr	r1, [pc, #12]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	080064cc 	.word	0x080064cc

080021fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	220f      	movs	r2, #15
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCC_GetClockConfig+0x58>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_RCC_GetClockConfig+0x58>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCC_GetClockConfig+0x58>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_RCC_GetClockConfig+0x58>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_RCC_GetClockConfig+0x5c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0207 	and.w	r2, r3, #7
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	40022000 	.word	0x40022000

0800225c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <RCC_Delay+0x34>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <RCC_Delay+0x38>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a5b      	lsrs	r3, r3, #9
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002278:	bf00      	nop
  }
  while (Delay --);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	60fa      	str	r2, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <RCC_Delay+0x1c>
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000000 	.word	0x20000000
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d07d      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b4c      	ldr	r3, [pc, #304]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d118      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ec:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a42      	ldr	r2, [pc, #264]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fc98 	bl	8000c2c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fc94 	bl	8000c2c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e06d      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800231e:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002326:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02e      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d027      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800233c:	4b2e      	ldr	r3, [pc, #184]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002344:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002346:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800234c:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002352:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fc63 	bl	8000c2c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fc5f 	bl	8000c2c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e036      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ee      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4917      	ldr	r1, [pc, #92]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	4313      	orrs	r3, r2
 800239c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a13      	ldr	r2, [pc, #76]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023bc:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	490b      	ldr	r1, [pc, #44]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023da:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4904      	ldr	r1, [pc, #16]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	42420440 	.word	0x42420440

08002404 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b10      	cmp	r3, #16
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b10      	cmp	r3, #16
 800242a:	f200 808a 	bhi.w	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d045      	beq.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d075      	beq.n	8002526 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800243a:	e082      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800243c:	4b46      	ldr	r3, [pc, #280]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002442:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d07b      	beq.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a41      	ldr	r2, [pc, #260]	@ (800255c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002466:	4b3c      	ldr	r3, [pc, #240]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0c5b      	lsrs	r3, r3, #17
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002480:	4a38      	ldr	r2, [pc, #224]	@ (8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fbb2 f2f3 	udiv	r2, r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	e004      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4a34      	ldr	r2, [pc, #208]	@ (8002568 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800249c:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a8:	d102      	bne.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	61bb      	str	r3, [r7, #24]
      break;
 80024ae:	e04a      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4a2d      	ldr	r2, [pc, #180]	@ (800256c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
      break;
 80024be:	e042      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d108      	bne.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e01f      	b.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024ee:	d109      	bne.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024fc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	e00f      	b.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800250e:	d11c      	bne.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d016      	beq.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800251c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002520:	61bb      	str	r3, [r7, #24]
      break;
 8002522:	e012      	b.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002524:	e011      	b.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002526:	f7ff fe55 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0b9b      	lsrs	r3, r3, #14
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
      break;
 8002540:	e004      	b.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002542:	bf00      	nop
 8002544:	e002      	b.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800254a:	bf00      	nop
    }
  }
  return (frequency);
 800254c:	69bb      	ldr	r3, [r7, #24]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	080064e8 	.word	0x080064e8
 8002560:	080064f8 	.word	0x080064f8
 8002564:	007a1200 	.word	0x007a1200
 8002568:	003d0900 	.word	0x003d0900
 800256c:	aaaaaaab 	.word	0xaaaaaaab

08002570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e041      	b.n	8002606 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f839 	bl	800260e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 f9b4 	bl	800291c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e03a      	b.n	80026ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a18      	ldr	r2, [pc, #96]	@ (80026b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x58>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d009      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x58>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <HAL_TIM_Base_Start_IT+0x9c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x58>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d010      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269a:	e007      	b.n	80026ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800

080026c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0202 	mvn.w	r2, #2
 80026f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8ed 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8e0 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8ef 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0204 	mvn.w	r2, #4
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f8c3 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8b6 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8c5 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0208 	mvn.w	r2, #8
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2204      	movs	r2, #4
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f899 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f88c 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f89b 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2208      	movs	r2, #8
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f86f 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f862 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f871 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0201 	mvn.w	r2, #1
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fd ffee 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002852:	2b80      	cmp	r3, #128	@ 0x80
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002860:	2b80      	cmp	r3, #128	@ 0x80
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8bf 	bl	80029f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b40      	cmp	r3, #64	@ 0x40
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f835 	bl	800290a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0220 	mvn.w	r2, #32
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f88a 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a29      	ldr	r2, [pc, #164]	@ (80029d4 <TIM_Base_SetConfig+0xb8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293a:	d007      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <TIM_Base_SetConfig+0xbc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <TIM_Base_SetConfig+0xc0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d108      	bne.n	800295e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <TIM_Base_SetConfig+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00b      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a19      	ldr	r2, [pc, #100]	@ (80029d8 <TIM_Base_SetConfig+0xbc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <TIM_Base_SetConfig+0xc0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <TIM_Base_SetConfig+0xb8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e042      	b.n	8002a9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd ff86 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9af 	bl	8002dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d16d      	bne.n	8002ba0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Transmit+0x2c>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e066      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	@ 0x21
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe f8a3 	bl	8000c2c <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b18:	e02a      	b.n	8002b70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2180      	movs	r1, #128	@ 0x80
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8d2 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e036      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e007      	b.n	8002b62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1cf      	bne.n	8002b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2140      	movs	r1, #64	@ 0x40
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f8a2 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e006      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	@ 0x28
 8002bae:	af02      	add	r7, sp, #8
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d17c      	bne.n	8002cc4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Receive+0x2c>
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e075      	b.n	8002cc6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2222      	movs	r2, #34	@ 0x22
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bee:	f7fe f81d 	bl	8000c2c <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	88fa      	ldrh	r2, [r7, #6]
 8002bfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c08:	d108      	bne.n	8002c1c <HAL_UART_Receive+0x72>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e003      	b.n	8002c24 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c24:	e043      	b.n	8002cae <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2120      	movs	r1, #32
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f84c 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e042      	b.n	8002cc6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e01f      	b.n	8002ca0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c68:	d007      	beq.n	8002c7a <HAL_UART_Receive+0xd0>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_UART_Receive+0xde>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e008      	b.n	8002c9a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1b6      	bne.n	8002c26 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b090      	sub	sp, #64	@ 0x40
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e050      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d04c      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002cee:	f7fd ff9d 	bl	8000c2c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d241      	bcs.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e5      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	613b      	str	r3, [r7, #16]
   return(result);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d52:	623a      	str	r2, [r7, #32]
 8002d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	69f9      	ldr	r1, [r7, #28]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e00f      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d09f      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3740      	adds	r7, #64	@ 0x40
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002de6:	f023 030c 	bic.w	r3, r3, #12
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <UART_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d103      	bne.n	8002e1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e14:	f7ff f9de 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	e002      	b.n	8002e22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7ff f9c6 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	0119      	lsls	r1, r3, #4
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009a      	lsls	r2, r3, #2
 8002e4c:	441a      	add	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2064      	movs	r0, #100	@ 0x64
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	3332      	adds	r3, #50	@ 0x32
 8002e6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e78:	4419      	add	r1, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009a      	lsls	r2, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e92:	fba3 0302 	umull	r0, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2064      	movs	r0, #100	@ 0x64
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	@ 0x32
 8002ea4:	4a07      	ldr	r2, [pc, #28]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	440a      	add	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	51eb851f 	.word	0x51eb851f

08002ec8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ece:	f3ef 8305 	mrs	r3, IPSR
 8002ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eda:	f3ef 8310 	mrs	r3, PRIMASK
 8002ede:	607b      	str	r3, [r7, #4]
  return(result);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <osKernelInitialize+0x32>
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <osKernelInitialize+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d109      	bne.n	8002f02 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eee:	f3ef 8311 	mrs	r3, BASEPRI
 8002ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002efa:	f06f 0305 	mvn.w	r3, #5
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e00c      	b.n	8002f1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <osKernelInitialize+0x60>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <osKernelInitialize+0x60>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e002      	b.n	8002f1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000168 	.word	0x20000168

08002f2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f32:	f3ef 8305 	mrs	r3, IPSR
 8002f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f42:	607b      	str	r3, [r7, #4]
  return(result);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <osKernelStart+0x32>
 8002f4a:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <osKernelStart+0x64>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d109      	bne.n	8002f66 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f52:	f3ef 8311 	mrs	r3, BASEPRI
 8002f56:	603b      	str	r3, [r7, #0]
  return(result);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002f5e:	f06f 0305 	mvn.w	r3, #5
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e00e      	b.n	8002f84 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <osKernelStart+0x64>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <osKernelStart+0x64>)
 8002f70:	2202      	movs	r2, #2
 8002f72:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f74:	f001 f8a8 	bl	80040c8 <vTaskStartScheduler>
      stat = osOK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e002      	b.n	8002f84 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f84:	68fb      	ldr	r3, [r7, #12]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000168 	.word	0x20000168

08002f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b092      	sub	sp, #72	@ 0x48
 8002f98:	af04      	add	r7, sp, #16
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa4:	f3ef 8305 	mrs	r3, IPSR
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 8094 	bne.w	80030da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 808d 	bne.w	80030da <osThreadNew+0x146>
 8002fc0:	4b48      	ldr	r3, [pc, #288]	@ (80030e4 <osThreadNew+0x150>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d106      	bne.n	8002fd6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8002fcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 8082 	bne.w	80030da <osThreadNew+0x146>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d07e      	beq.n	80030da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002fe0:	2318      	movs	r3, #24
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002fe8:	f107 031b 	add.w	r3, r7, #27
 8002fec:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d045      	beq.n	8003086 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <osThreadNew+0x74>
        name = attr->name;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <osThreadNew+0x9a>
 800301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301e:	2b38      	cmp	r3, #56	@ 0x38
 8003020:	d805      	bhi.n	800302e <osThreadNew+0x9a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <osThreadNew+0x9e>
        return (NULL);
 800302e:	2300      	movs	r3, #0
 8003030:	e054      	b.n	80030dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <osThreadNew+0xd4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003050:	d90a      	bls.n	8003068 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <osThreadNew+0xd4>
        mem = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003066:	e010      	b.n	800308a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10c      	bne.n	800308a <osThreadNew+0xf6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <osThreadNew+0xf6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <osThreadNew+0xf6>
          mem = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003084:	e001      	b.n	800308a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	2b01      	cmp	r3, #1
 800308e:	d110      	bne.n	80030b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003098:	9202      	str	r2, [sp, #8]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fe24 	bl	8003cf4 <xTaskCreateStatic>
 80030ac:	4603      	mov	r3, r0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e013      	b.n	80030da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d110      	bne.n	80030da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fe71 	bl	8003db2 <xTaskCreate>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <osThreadNew+0x146>
          hTask = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3738      	adds	r7, #56	@ 0x38
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000168 	.word	0x20000168

080030e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030f0:	f3ef 8305 	mrs	r3, IPSR
 80030f4:	613b      	str	r3, [r7, #16]
  return(result);
 80030f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10f      	bne.n	800311c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003100:	60fb      	str	r3, [r7, #12]
  return(result);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <osDelay+0x34>
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <osDelay+0x58>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d109      	bne.n	8003124 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003110:	f3ef 8311 	mrs	r3, BASEPRI
 8003114:	60bb      	str	r3, [r7, #8]
  return(result);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <osDelay+0x3c>
    stat = osErrorISR;
 800311c:	f06f 0305 	mvn.w	r3, #5
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e007      	b.n	8003134 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <osDelay+0x4c>
      vTaskDelay(ticks);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 ff94 	bl	800405c <vTaskDelay>
    }
  }

  return (stat);
 8003134:	697b      	ldr	r3, [r7, #20]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000168 	.word	0x20000168

08003144 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a06      	ldr	r2, [pc, #24]	@ (800316c <vApplicationGetIdleTaskMemory+0x28>)
 8003154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <vApplicationGetIdleTaskMemory+0x2c>)
 800315a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	@ 0x80
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	2000016c 	.word	0x2000016c
 8003170:	20000214 	.word	0x20000214

08003174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <vApplicationGetTimerTaskMemory+0x30>)
 800318a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003192:	601a      	str	r2, [r3, #0]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000414 	.word	0x20000414
 80031a4:	200004bc 	.word	0x200004bc

080031a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f103 0208 	add.w	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f103 0208 	add.w	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f103 0208 	add.w	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d103      	bne.n	8003264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e00c      	b.n	800327e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3308      	adds	r3, #8
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e002      	b.n	8003272 <vListInsert+0x2e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d2f6      	bcs.n	800326c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6892      	ldr	r2, [r2, #8]
 80032ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6852      	ldr	r2, [r2, #4]
 80032d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d103      	bne.n	80032e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1e5a      	subs	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
	...

08003308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003334:	f002 f822 	bl	800537c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	441a      	add	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003364:	3b01      	subs	r3, #1
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	441a      	add	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	22ff      	movs	r2, #255	@ 0xff
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	22ff      	movs	r2, #255	@ 0xff
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d114      	bne.n	80033b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01a      	beq.n	80033c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3310      	adds	r3, #16
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f936 	bl	8004608 <xTaskRemoveFromEventList>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <xQueueGenericReset+0xd0>)
 80033a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	e009      	b.n	80033c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3310      	adds	r3, #16
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fef5 	bl	80031a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3324      	adds	r3, #36	@ 0x24
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fef0 	bl	80031a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033c8:	f002 f808 	bl	80053dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033cc:	2301      	movs	r3, #1
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08e      	sub	sp, #56	@ 0x38
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	e7fd      	b.n	8003422 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <xQueueGenericCreateStatic+0x56>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <xQueueGenericCreateStatic+0x5a>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <xQueueGenericCreateStatic+0x5c>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	623b      	str	r3, [r7, #32]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <xQueueGenericCreateStatic+0x84>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <xQueueGenericCreateStatic+0x88>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <xQueueGenericCreateStatic+0x8a>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10b      	bne.n	8003482 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	61fb      	str	r3, [r7, #28]
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	e7fd      	b.n	800347e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003482:	2350      	movs	r3, #80	@ 0x50
 8003484:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b50      	cmp	r3, #80	@ 0x50
 800348a:	d00b      	beq.n	80034a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	61bb      	str	r3, [r7, #24]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034b6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f805 	bl	80034d4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	@ 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d103      	bne.n	80034f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e002      	b.n	80034f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003502:	2101      	movs	r1, #1
 8003504:	69b8      	ldr	r0, [r7, #24]
 8003506:	f7ff feff 	bl	8003308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	@ 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <xQueueGenericSend+0x34>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <xQueueGenericSend+0x42>
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueGenericSend+0x46>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueGenericSend+0x48>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <xQueueGenericSend+0x64>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d103      	bne.n	800358e <xQueueGenericSend+0x72>
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <xQueueGenericSend+0x76>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <xQueueGenericSend+0x78>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	623b      	str	r3, [r7, #32]
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b0:	f001 f9f4 	bl	800499c <xTaskGetSchedulerState>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <xQueueGenericSend+0xa4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <xQueueGenericSend+0xa8>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <xQueueGenericSend+0xaa>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fb      	str	r3, [r7, #28]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e2:	f001 fecb 	bl	800537c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <xQueueGenericSend+0xdc>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d129      	bne.n	800364c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035fe:	f000 fa0d 	bl	8003a1c <prvCopyDataToQueue>
 8003602:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	3324      	adds	r3, #36	@ 0x24
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fff9 	bl	8004608 <xTaskRemoveFromEventList>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800361c:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <xQueueGenericSend+0x200>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	e00a      	b.n	8003644 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <xQueueGenericSend+0x200>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003644:	f001 feca 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	e063      	b.n	8003714 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003652:	f001 fec3 	bl	80053dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003656:	2300      	movs	r3, #0
 8003658:	e05c      	b.n	8003714 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800365a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f833 	bl	80046d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800366e:	f001 feb5 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003672:	f000 fd99 	bl	80041a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003676:	f001 fe81 	bl	800537c <vPortEnterCritical>
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <xQueueGenericSend+0x174>
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003696:	b25b      	sxtb	r3, r3
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <xQueueGenericSend+0x18a>
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a6:	f001 fe99 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036aa:	1d3a      	adds	r2, r7, #4
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 f822 	bl	80046fc <xTaskCheckForTimeOut>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d124      	bne.n	8003708 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036c0:	f000 faa4 	bl	8003c0c <prvIsQueueFull>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d018      	beq.n	80036fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	3310      	adds	r3, #16
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 ff46 	bl	8004564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036da:	f000 fa2f 	bl	8003b3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036de:	f000 fd71 	bl	80041c4 <xTaskResumeAll>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af7c 	bne.w	80035e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80036ea:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <xQueueGenericSend+0x200>)
 80036ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	e772      	b.n	80035e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036fe:	f000 fa1d 	bl	8003b3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003702:	f000 fd5f 	bl	80041c4 <xTaskResumeAll>
 8003706:	e76c      	b.n	80035e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370a:	f000 fa17 	bl	8003b3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800370e:	f000 fd59 	bl	80041c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003712:	2300      	movs	r3, #0
		}
	}
}
 8003714:	4618      	mov	r0, r3
 8003716:	3738      	adds	r7, #56	@ 0x38
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	@ 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <xQueueGenericSendFromISR+0x3e>
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <xQueueGenericSendFromISR+0x42>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <xQueueGenericSendFromISR+0x44>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	623b      	str	r3, [r7, #32]
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d103      	bne.n	800378e <xQueueGenericSendFromISR+0x6e>
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <xQueueGenericSendFromISR+0x72>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGenericSendFromISR+0x74>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	61fb      	str	r3, [r7, #28]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037b0:	f001 fea6 	bl	8005500 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037b4:	f3ef 8211 	mrs	r2, BASEPRI
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61ba      	str	r2, [r7, #24]
 80037ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <xQueueGenericSendFromISR+0xc2>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d12c      	bne.n	800383c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037f2:	f000 f913 	bl	8003a1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d112      	bne.n	8003826 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	3324      	adds	r3, #36	@ 0x24
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fefb 	bl	8004608 <xTaskRemoveFromEventList>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800382a:	3301      	adds	r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	b25a      	sxtb	r2, r3
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003836:	2301      	movs	r3, #1
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800383a:	e001      	b.n	8003840 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800383c:	2300      	movs	r3, #0
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800384a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800384c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800384e:	4618      	mov	r0, r3
 8003850:	3738      	adds	r7, #56	@ 0x38
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	@ 0x30
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <xQueueReceive+0x32>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	623b      	str	r3, [r7, #32]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <xQueueReceive+0x40>
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <xQueueReceive+0x44>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <xQueueReceive+0x46>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <xQueueReceive+0x62>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	61fb      	str	r3, [r7, #28]
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ba:	f001 f86f 	bl	800499c <xTaskGetSchedulerState>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <xQueueReceive+0x72>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <xQueueReceive+0x76>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueReceive+0x78>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xQueueReceive+0x94>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61bb      	str	r3, [r7, #24]
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ec:	f001 fd46 	bl	800537c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01f      	beq.n	800393c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003900:	f000 f8f6 	bl	8003af0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003916:	3310      	adds	r3, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fe75 	bl	8004608 <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b3c      	ldr	r3, [pc, #240]	@ (8003a18 <xQueueReceive+0x1c0>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003934:	f001 fd52 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 8003938:	2301      	movs	r3, #1
 800393a:	e069      	b.n	8003a10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003942:	f001 fd4b 	bl	80053dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003946:	2300      	movs	r3, #0
 8003948:	e062      	b.n	8003a10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f000 febb 	bl	80046d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800395e:	f001 fd3d 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003962:	f000 fc21 	bl	80041a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003966:	f001 fd09 	bl	800537c <vPortEnterCritical>
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003970:	b25b      	sxtb	r3, r3
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d103      	bne.n	8003980 <xQueueReceive+0x128>
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003986:	b25b      	sxtb	r3, r3
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d103      	bne.n	8003996 <xQueueReceive+0x13e>
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003996:	f001 fd21 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800399a:	1d3a      	adds	r2, r7, #4
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 feaa 	bl	80046fc <xTaskCheckForTimeOut>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d123      	bne.n	80039f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b0:	f000 f916 	bl	8003be0 <prvIsQueueEmpty>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d017      	beq.n	80039ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039bc:	3324      	adds	r3, #36	@ 0x24
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fdce 	bl	8004564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ca:	f000 f8b7 	bl	8003b3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039ce:	f000 fbf9 	bl	80041c4 <xTaskResumeAll>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d189      	bne.n	80038ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <xQueueReceive+0x1c0>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	e780      	b.n	80038ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ec:	f000 f8a6 	bl	8003b3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039f0:	f000 fbe8 	bl	80041c4 <xTaskResumeAll>
 80039f4:	e77a      	b.n	80038ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039f8:	f000 f8a0 	bl	8003b3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039fc:	f000 fbe2 	bl	80041c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a02:	f000 f8ed 	bl	8003be0 <prvIsQueueEmpty>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f43f af6f 	beq.w	80038ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3730      	adds	r7, #48	@ 0x30
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d14d      	bne.n	8003ade <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ffc6 	bl	80049d8 <xTaskPriorityDisinherit>
 8003a4c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e043      	b.n	8003ade <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d119      	bne.n	8003a90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6898      	ldr	r0, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	461a      	mov	r2, r3
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	f002 f812 	bl	8005a90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d32b      	bcc.n	8003ade <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	e026      	b.n	8003ade <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68d8      	ldr	r0, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	f001 fff8 	bl	8005a90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	425b      	negs	r3, r3
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d207      	bcs.n	8003acc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	425b      	negs	r3, r3
 8003ac6:	441a      	add	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d105      	bne.n	8003ade <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ae6:	697b      	ldr	r3, [r7, #20]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	441a      	add	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d303      	bcc.n	8003b24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68d9      	ldr	r1, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6838      	ldr	r0, [r7, #0]
 8003b30:	f001 ffae 	bl	8005a90 <memcpy>
	}
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b44:	f001 fc1a 	bl	800537c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b50:	e011      	b.n	8003b76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d012      	beq.n	8003b80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3324      	adds	r3, #36	@ 0x24
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd52 	bl	8004608 <xTaskRemoveFromEventList>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b6a:	f000 fe2b 	bl	80047c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	dce9      	bgt.n	8003b52 <prvUnlockQueue+0x16>
 8003b7e:	e000      	b.n	8003b82 <prvUnlockQueue+0x46>
					break;
 8003b80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	22ff      	movs	r2, #255	@ 0xff
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b8a:	f001 fc27 	bl	80053dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b8e:	f001 fbf5 	bl	800537c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b9a:	e011      	b.n	8003bc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3310      	adds	r3, #16
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fd2d 	bl	8004608 <xTaskRemoveFromEventList>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bb4:	f000 fe06 	bl	80047c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	dce9      	bgt.n	8003b9c <prvUnlockQueue+0x60>
 8003bc8:	e000      	b.n	8003bcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	22ff      	movs	r2, #255	@ 0xff
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bd4:	f001 fc02 	bl	80053dc <vPortExitCritical>
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003be8:	f001 fbc8 	bl	800537c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e001      	b.n	8003bfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bfe:	f001 fbed 	bl	80053dc <vPortExitCritical>

	return xReturn;
 8003c02:	68fb      	ldr	r3, [r7, #12]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c14:	f001 fbb2 	bl	800537c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d102      	bne.n	8003c2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e001      	b.n	8003c2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c2e:	f001 fbd5 	bl	80053dc <vPortExitCritical>

	return xReturn;
 8003c32:	68fb      	ldr	r3, [r7, #12]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e014      	b.n	8003c76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c88 <vQueueAddToRegistry+0x4c>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c58:	490b      	ldr	r1, [pc, #44]	@ (8003c88 <vQueueAddToRegistry+0x4c>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c62:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <vQueueAddToRegistry+0x4c>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c6e:	e006      	b.n	8003c7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d9e7      	bls.n	8003c4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	200008bc 	.word	0x200008bc

08003c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c9c:	f001 fb6e 	bl	800537c <vPortEnterCritical>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d103      	bne.n	8003cb6 <vQueueWaitForMessageRestricted+0x2a>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d103      	bne.n	8003ccc <vQueueWaitForMessageRestricted+0x40>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ccc:	f001 fb86 	bl	80053dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3324      	adds	r3, #36	@ 0x24
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fc65 	bl	80045b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff ff28 	bl	8003b3c <prvUnlockQueue>
	}
 8003cec:	bf00      	nop
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	@ 0x38
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	623b      	str	r3, [r7, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	61fb      	str	r3, [r7, #28]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d3e:	23a8      	movs	r3, #168	@ 0xa8
 8003d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2ba8      	cmp	r3, #168	@ 0xa8
 8003d46:	d00b      	beq.n	8003d60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	61bb      	str	r3, [r7, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01e      	beq.n	8003da4 <xTaskCreateStatic+0xb0>
 8003d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9303      	str	r3, [sp, #12]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f850 	bl	8003e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d9e:	f000 f8ed 	bl	8003f7c <prvAddNewTaskToReadyList>
 8003da2:	e001      	b.n	8003da8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003da8:	697b      	ldr	r3, [r7, #20]
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3728      	adds	r7, #40	@ 0x28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08c      	sub	sp, #48	@ 0x30
 8003db6:	af04      	add	r7, sp, #16
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 fbda 	bl	8005580 <pvPortMalloc>
 8003dcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003dd4:	20a8      	movs	r0, #168	@ 0xa8
 8003dd6:	f001 fbd3 	bl	8005580 <pvPortMalloc>
 8003dda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003de8:	e005      	b.n	8003df6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f001 fc90 	bl	8005710 <vPortFree>
 8003df0:	e001      	b.n	8003df6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d017      	beq.n	8003e2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	9302      	str	r3, [sp, #8]
 8003e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f80e 	bl	8003e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e20:	69f8      	ldr	r0, [r7, #28]
 8003e22:	f000 f8ab 	bl	8003f7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e002      	b.n	8003e32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e32:	69bb      	ldr	r3, [r7, #24]
	}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	461a      	mov	r2, r3
 8003e54:	21a5      	movs	r1, #165	@ 0xa5
 8003e56:	f001 fd91 	bl	800597c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e64:	3b01      	subs	r3, #1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f023 0307 	bic.w	r3, r3, #7
 8003e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	617b      	str	r3, [r7, #20]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	e012      	b.n	8003ec2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	7819      	ldrb	r1, [r3, #0]
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3334      	adds	r3, #52	@ 0x34
 8003eac:	460a      	mov	r2, r1
 8003eae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	d9e9      	bls.n	8003e9c <prvInitialiseNewTask+0x60>
 8003ec8:	e000      	b.n	8003ecc <prvInitialiseNewTask+0x90>
		{
			break;
 8003eca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	2b37      	cmp	r3, #55	@ 0x37
 8003ed8:	d901      	bls.n	8003ede <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eda:	2337      	movs	r3, #55	@ 0x37
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f976 	bl	80031e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	3318      	adds	r3, #24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f971 	bl	80031e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	3354      	adds	r3, #84	@ 0x54
 8003f2e:	224c      	movs	r2, #76	@ 0x4c
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 fd22 	bl	800597c <memset>
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f70 <prvInitialiseNewTask+0x134>)
 8003f3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <prvInitialiseNewTask+0x138>)
 8003f42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <prvInitialiseNewTask+0x13c>)
 8003f48:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	69b8      	ldr	r0, [r7, #24]
 8003f50:	f001 f926 	bl	80051a0 <pxPortInitialiseStack>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f66:	bf00      	nop
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20001d58 	.word	0x20001d58
 8003f74:	20001dc0 	.word	0x20001dc0
 8003f78:	20001e28 	.word	0x20001e28

08003f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f84:	f001 f9fa 	bl	800537c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	@ (8004040 <prvAddNewTaskToReadyList+0xc4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <prvAddNewTaskToReadyList+0xc4>)
 8003f90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f92:	4b2c      	ldr	r3, [pc, #176]	@ (8004044 <prvAddNewTaskToReadyList+0xc8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <prvAddNewTaskToReadyList+0xc8>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <prvAddNewTaskToReadyList+0xc4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d110      	bne.n	8003fca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fa8:	f000 fc30 	bl	800480c <prvInitialiseTaskLists>
 8003fac:	e00d      	b.n	8003fca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fae:	4b26      	ldr	r3, [pc, #152]	@ (8004048 <prvAddNewTaskToReadyList+0xcc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fb6:	4b23      	ldr	r3, [pc, #140]	@ (8004044 <prvAddNewTaskToReadyList+0xc8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d802      	bhi.n	8003fca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <prvAddNewTaskToReadyList+0xc8>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fca:	4b20      	ldr	r3, [pc, #128]	@ (800404c <prvAddNewTaskToReadyList+0xd0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <prvAddNewTaskToReadyList+0xd0>)
 8003fd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <prvAddNewTaskToReadyList+0xd0>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <prvAddNewTaskToReadyList+0xd4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d903      	bls.n	8003ff0 <prvAddNewTaskToReadyList+0x74>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <prvAddNewTaskToReadyList+0xd4>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <prvAddNewTaskToReadyList+0xd8>)
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7ff f8f9 	bl	80031fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800400c:	f001 f9e6 	bl	80053dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <prvAddNewTaskToReadyList+0xcc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004018:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <prvAddNewTaskToReadyList+0xc8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d207      	bcs.n	8004036 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004026:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <prvAddNewTaskToReadyList+0xdc>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000dd0 	.word	0x20000dd0
 8004044:	200008fc 	.word	0x200008fc
 8004048:	20000ddc 	.word	0x20000ddc
 800404c:	20000dec 	.word	0x20000dec
 8004050:	20000dd8 	.word	0x20000dd8
 8004054:	20000900 	.word	0x20000900
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <vTaskDelay+0x64>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <vTaskDelay+0x32>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800408e:	f000 f88b 	bl	80041a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004092:	2100      	movs	r1, #0
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fd0f 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800409a:	f000 f893 	bl	80041c4 <xTaskResumeAll>
 800409e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040a6:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <vTaskDelay+0x68>)
 80040a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000df8 	.word	0x20000df8
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	@ 0x28
 80040cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040d6:	463a      	mov	r2, r7
 80040d8:	1d39      	adds	r1, r7, #4
 80040da:	f107 0308 	add.w	r3, r7, #8
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f830 	bl	8003144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	9202      	str	r2, [sp, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	2300      	movs	r3, #0
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	460a      	mov	r2, r1
 80040f6:	4924      	ldr	r1, [pc, #144]	@ (8004188 <vTaskStartScheduler+0xc0>)
 80040f8:	4824      	ldr	r0, [pc, #144]	@ (800418c <vTaskStartScheduler+0xc4>)
 80040fa:	f7ff fdfb 	bl	8003cf4 <xTaskCreateStatic>
 80040fe:	4603      	mov	r3, r0
 8004100:	4a23      	ldr	r2, [pc, #140]	@ (8004190 <vTaskStartScheduler+0xc8>)
 8004102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004104:	4b22      	ldr	r3, [pc, #136]	@ (8004190 <vTaskStartScheduler+0xc8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800410c:	2301      	movs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e001      	b.n	8004116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800411c:	f000 fd20 	bl	8004b60 <xTimerCreateTimerTask>
 8004120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d11b      	bne.n	8004160 <vTaskStartScheduler+0x98>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	613b      	str	r3, [r7, #16]
}
 800413a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <vTaskStartScheduler+0xcc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3354      	adds	r3, #84	@ 0x54
 8004142:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <vTaskStartScheduler+0xd0>)
 8004144:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <vTaskStartScheduler+0xd4>)
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800414e:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <vTaskStartScheduler+0xd8>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <vTaskStartScheduler+0xdc>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800415a:	f001 f89d 	bl	8005298 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800415e:	e00f      	b.n	8004180 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d10b      	bne.n	8004180 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60fb      	str	r3, [r7, #12]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <vTaskStartScheduler+0xb4>
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	080063f0 	.word	0x080063f0
 800418c:	080047dd 	.word	0x080047dd
 8004190:	20000df4 	.word	0x20000df4
 8004194:	200008fc 	.word	0x200008fc
 8004198:	20000010 	.word	0x20000010
 800419c:	20000df0 	.word	0x20000df0
 80041a0:	20000ddc 	.word	0x20000ddc
 80041a4:	20000dd4 	.word	0x20000dd4

080041a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041ac:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <vTaskSuspendAll+0x18>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a03      	ldr	r2, [pc, #12]	@ (80041c0 <vTaskSuspendAll+0x18>)
 80041b4:	6013      	str	r3, [r2, #0]
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000df8 	.word	0x20000df8

080041c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041d2:	4b42      	ldr	r3, [pc, #264]	@ (80042dc <xTaskResumeAll+0x118>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	603b      	str	r3, [r7, #0]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041f2:	f001 f8c3 	bl	800537c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <xTaskResumeAll+0x118>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a37      	ldr	r2, [pc, #220]	@ (80042dc <xTaskResumeAll+0x118>)
 80041fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <xTaskResumeAll+0x118>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d162      	bne.n	80042ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004208:	4b35      	ldr	r3, [pc, #212]	@ (80042e0 <xTaskResumeAll+0x11c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05e      	beq.n	80042ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004210:	e02f      	b.n	8004272 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004212:	4b34      	ldr	r3, [pc, #208]	@ (80042e4 <xTaskResumeAll+0x120>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3318      	adds	r3, #24
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f848 	bl	80032b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff f843 	bl	80032b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	4b2d      	ldr	r3, [pc, #180]	@ (80042e8 <xTaskResumeAll+0x124>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d903      	bls.n	8004242 <xTaskResumeAll+0x7e>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <xTaskResumeAll+0x124>)
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a27      	ldr	r2, [pc, #156]	@ (80042ec <xTaskResumeAll+0x128>)
 8004250:	441a      	add	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7fe ffd0 	bl	80031fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004262:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <xTaskResumeAll+0x12c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <xTaskResumeAll+0x130>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004272:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <xTaskResumeAll+0x120>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1cb      	bne.n	8004212 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004280:	f000 fb68 	bl	8004954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004284:	4b1c      	ldr	r3, [pc, #112]	@ (80042f8 <xTaskResumeAll+0x134>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004290:	f000 f844 	bl	800431c <xTaskIncrementTick>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800429a:	4b16      	ldr	r3, [pc, #88]	@ (80042f4 <xTaskResumeAll+0x130>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f1      	bne.n	8004290 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <xTaskResumeAll+0x134>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <xTaskResumeAll+0x130>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <xTaskResumeAll+0x138>)
 80042c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ce:	f001 f885 	bl	80053dc <vPortExitCritical>

	return xAlreadyYielded;
 80042d2:	68bb      	ldr	r3, [r7, #8]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000df8 	.word	0x20000df8
 80042e0:	20000dd0 	.word	0x20000dd0
 80042e4:	20000d90 	.word	0x20000d90
 80042e8:	20000dd8 	.word	0x20000dd8
 80042ec:	20000900 	.word	0x20000900
 80042f0:	200008fc 	.word	0x200008fc
 80042f4:	20000de4 	.word	0x20000de4
 80042f8:	20000de0 	.word	0x20000de0
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004306:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <xTaskGetTickCount+0x18>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800430c:	687b      	ldr	r3, [r7, #4]
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	20000dd4 	.word	0x20000dd4

0800431c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004326:	4b52      	ldr	r3, [pc, #328]	@ (8004470 <xTaskIncrementTick+0x154>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 808f 	bne.w	800444e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <xTaskIncrementTick+0x158>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004338:	4a4e      	ldr	r2, [pc, #312]	@ (8004474 <xTaskIncrementTick+0x158>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d121      	bne.n	8004388 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <xTaskIncrementTick+0x15c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <xTaskIncrementTick+0x4a>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	603b      	str	r3, [r7, #0]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <xTaskIncrementTick+0x46>
 8004366:	4b44      	ldr	r3, [pc, #272]	@ (8004478 <xTaskIncrementTick+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	4b43      	ldr	r3, [pc, #268]	@ (800447c <xTaskIncrementTick+0x160>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <xTaskIncrementTick+0x15c>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4a41      	ldr	r2, [pc, #260]	@ (800447c <xTaskIncrementTick+0x160>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <xTaskIncrementTick+0x164>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3301      	adds	r3, #1
 8004380:	4a3f      	ldr	r2, [pc, #252]	@ (8004480 <xTaskIncrementTick+0x164>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	f000 fae6 	bl	8004954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004388:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <xTaskIncrementTick+0x168>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d34e      	bcc.n	8004430 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004392:	4b39      	ldr	r3, [pc, #228]	@ (8004478 <xTaskIncrementTick+0x15c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <xTaskIncrementTick+0x84>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <xTaskIncrementTick+0x86>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	4b37      	ldr	r3, [pc, #220]	@ (8004484 <xTaskIncrementTick+0x168>)
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	601a      	str	r2, [r3, #0]
					break;
 80043ae:	e03f      	b.n	8004430 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043b0:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <xTaskIncrementTick+0x15c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d203      	bcs.n	80043d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <xTaskIncrementTick+0x168>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
						break;
 80043ce:	e02f      	b.n	8004430 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe ff6d 	bl	80032b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3318      	adds	r3, #24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe ff64 	bl	80032b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <xTaskIncrementTick+0x16c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d903      	bls.n	8004400 <xTaskIncrementTick+0xe4>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	4a22      	ldr	r2, [pc, #136]	@ (8004488 <xTaskIncrementTick+0x16c>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4a1f      	ldr	r2, [pc, #124]	@ (800448c <xTaskIncrementTick+0x170>)
 800440e:	441a      	add	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fe fef1 	bl	80031fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004420:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <xTaskIncrementTick+0x174>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	429a      	cmp	r2, r3
 8004428:	d3b3      	bcc.n	8004392 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442e:	e7b0      	b.n	8004392 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004430:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <xTaskIncrementTick+0x174>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004436:	4915      	ldr	r1, [pc, #84]	@ (800448c <xTaskIncrementTick+0x170>)
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d907      	bls.n	8004458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e004      	b.n	8004458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800444e:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <xTaskIncrementTick+0x178>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <xTaskIncrementTick+0x178>)
 8004456:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <xTaskIncrementTick+0x17c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004464:	697b      	ldr	r3, [r7, #20]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000df8 	.word	0x20000df8
 8004474:	20000dd4 	.word	0x20000dd4
 8004478:	20000d88 	.word	0x20000d88
 800447c:	20000d8c 	.word	0x20000d8c
 8004480:	20000de8 	.word	0x20000de8
 8004484:	20000df0 	.word	0x20000df0
 8004488:	20000dd8 	.word	0x20000dd8
 800448c:	20000900 	.word	0x20000900
 8004490:	200008fc 	.word	0x200008fc
 8004494:	20000de0 	.word	0x20000de0
 8004498:	20000de4 	.word	0x20000de4

0800449c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044a2:	4b2a      	ldr	r3, [pc, #168]	@ (800454c <vTaskSwitchContext+0xb0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044aa:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <vTaskSwitchContext+0xb4>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044b0:	e047      	b.n	8004542 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80044b2:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <vTaskSwitchContext+0xb4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044b8:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <vTaskSwitchContext+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e011      	b.n	80044e4 <vTaskSwitchContext+0x48>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <vTaskSwitchContext+0x42>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	607b      	str	r3, [r7, #4]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <vTaskSwitchContext+0x3e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	491c      	ldr	r1, [pc, #112]	@ (8004558 <vTaskSwitchContext+0xbc>)
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0e3      	beq.n	80044c0 <vTaskSwitchContext+0x24>
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a15      	ldr	r2, [pc, #84]	@ (8004558 <vTaskSwitchContext+0xbc>)
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3308      	adds	r3, #8
 800451a:	429a      	cmp	r2, r3
 800451c:	d104      	bne.n	8004528 <vTaskSwitchContext+0x8c>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4a0b      	ldr	r2, [pc, #44]	@ (800455c <vTaskSwitchContext+0xc0>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <vTaskSwitchContext+0xb8>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004538:	4b08      	ldr	r3, [pc, #32]	@ (800455c <vTaskSwitchContext+0xc0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3354      	adds	r3, #84	@ 0x54
 800453e:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <vTaskSwitchContext+0xc4>)
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	20000df8 	.word	0x20000df8
 8004550:	20000de4 	.word	0x20000de4
 8004554:	20000dd8 	.word	0x20000dd8
 8004558:	20000900 	.word	0x20000900
 800455c:	200008fc 	.word	0x200008fc
 8004560:	20000010 	.word	0x20000010

08004564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <vTaskPlaceOnEventList+0x48>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3318      	adds	r3, #24
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fe fe55 	bl	8003244 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800459a:	2101      	movs	r1, #1
 800459c:	6838      	ldr	r0, [r7, #0]
 800459e:	f000 fa8b 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200008fc 	.word	0x200008fc

080045b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	617b      	str	r3, [r7, #20]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <vTaskPlaceOnEventListRestricted+0x54>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3318      	adds	r3, #24
 80045e0:	4619      	mov	r1, r3
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fe fe0b 	bl	80031fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	68b8      	ldr	r0, [r7, #8]
 80045f8:	f000 fa5e 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
	}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200008fc 	.word	0x200008fc

08004608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3318      	adds	r3, #24
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fe3a 	bl	80032b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004640:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <xTaskRemoveFromEventList+0xb0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11d      	bne.n	8004684 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fe31 	bl	80032b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004656:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <xTaskRemoveFromEventList+0xb4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d903      	bls.n	8004666 <xTaskRemoveFromEventList+0x5e>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <xTaskRemoveFromEventList+0xb4>)
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <xTaskRemoveFromEventList+0xb8>)
 8004674:	441a      	add	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3304      	adds	r3, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7fe fdbe 	bl	80031fe <vListInsertEnd>
 8004682:	e005      	b.n	8004690 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	3318      	adds	r3, #24
 8004688:	4619      	mov	r1, r3
 800468a:	480e      	ldr	r0, [pc, #56]	@ (80046c4 <xTaskRemoveFromEventList+0xbc>)
 800468c:	f7fe fdb7 	bl	80031fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <xTaskRemoveFromEventList+0xc0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	429a      	cmp	r2, r3
 800469c:	d905      	bls.n	80046aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <xTaskRemoveFromEventList+0xc4>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e001      	b.n	80046ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046ae:	697b      	ldr	r3, [r7, #20]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000df8 	.word	0x20000df8
 80046bc:	20000dd8 	.word	0x20000dd8
 80046c0:	20000900 	.word	0x20000900
 80046c4:	20000d90 	.word	0x20000d90
 80046c8:	200008fc 	.word	0x200008fc
 80046cc:	20000de4 	.word	0x20000de4

080046d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <vTaskInternalSetTimeOutState+0x24>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <vTaskInternalSetTimeOutState+0x28>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000de8 	.word	0x20000de8
 80046f8:	20000dd4 	.word	0x20000dd4

080046fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	613b      	str	r3, [r7, #16]
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60fb      	str	r3, [r7, #12]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004742:	f000 fe1b 	bl	800537c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004746:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <xTaskCheckForTimeOut+0xc0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d102      	bne.n	8004766 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e023      	b.n	80047ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <xTaskCheckForTimeOut+0xc4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d007      	beq.n	8004782 <xTaskCheckForTimeOut+0x86>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e015      	b.n	80047ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d20b      	bcs.n	80047a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad2      	subs	r2, r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff99 	bl	80046d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e004      	b.n	80047ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047ae:	f000 fe15 	bl	80053dc <vPortExitCritical>

	return xReturn;
 80047b2:	69fb      	ldr	r3, [r7, #28]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000dd4 	.word	0x20000dd4
 80047c0:	20000de8 	.word	0x20000de8

080047c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047c8:	4b03      	ldr	r3, [pc, #12]	@ (80047d8 <vTaskMissedYield+0x14>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000de4 	.word	0x20000de4

080047dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047e4:	f000 f852 	bl	800488c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047e8:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <prvIdleTask+0x28>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d9f9      	bls.n	80047e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <prvIdleTask+0x2c>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004800:	e7f0      	b.n	80047e4 <prvIdleTask+0x8>
 8004802:	bf00      	nop
 8004804:	20000900 	.word	0x20000900
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	e00c      	b.n	8004832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4a12      	ldr	r2, [pc, #72]	@ (800486c <prvInitialiseTaskLists+0x60>)
 8004824:	4413      	add	r3, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fcbe 	bl	80031a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3301      	adds	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b37      	cmp	r3, #55	@ 0x37
 8004836:	d9ef      	bls.n	8004818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004838:	480d      	ldr	r0, [pc, #52]	@ (8004870 <prvInitialiseTaskLists+0x64>)
 800483a:	f7fe fcb5 	bl	80031a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800483e:	480d      	ldr	r0, [pc, #52]	@ (8004874 <prvInitialiseTaskLists+0x68>)
 8004840:	f7fe fcb2 	bl	80031a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004844:	480c      	ldr	r0, [pc, #48]	@ (8004878 <prvInitialiseTaskLists+0x6c>)
 8004846:	f7fe fcaf 	bl	80031a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800484a:	480c      	ldr	r0, [pc, #48]	@ (800487c <prvInitialiseTaskLists+0x70>)
 800484c:	f7fe fcac 	bl	80031a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004850:	480b      	ldr	r0, [pc, #44]	@ (8004880 <prvInitialiseTaskLists+0x74>)
 8004852:	f7fe fca9 	bl	80031a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <prvInitialiseTaskLists+0x78>)
 8004858:	4a05      	ldr	r2, [pc, #20]	@ (8004870 <prvInitialiseTaskLists+0x64>)
 800485a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <prvInitialiseTaskLists+0x7c>)
 800485e:	4a05      	ldr	r2, [pc, #20]	@ (8004874 <prvInitialiseTaskLists+0x68>)
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000900 	.word	0x20000900
 8004870:	20000d60 	.word	0x20000d60
 8004874:	20000d74 	.word	0x20000d74
 8004878:	20000d90 	.word	0x20000d90
 800487c:	20000da4 	.word	0x20000da4
 8004880:	20000dbc 	.word	0x20000dbc
 8004884:	20000d88 	.word	0x20000d88
 8004888:	20000d8c 	.word	0x20000d8c

0800488c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004892:	e019      	b.n	80048c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004894:	f000 fd72 	bl	800537c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004898:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <prvCheckTasksWaitingTermination+0x50>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fd05 	bl	80032b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <prvCheckTasksWaitingTermination+0x54>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	4a0b      	ldr	r2, [pc, #44]	@ (80048e0 <prvCheckTasksWaitingTermination+0x54>)
 80048b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <prvCheckTasksWaitingTermination+0x58>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <prvCheckTasksWaitingTermination+0x58>)
 80048bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048be:	f000 fd8d 	bl	80053dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f810 	bl	80048e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <prvCheckTasksWaitingTermination+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e1      	bne.n	8004894 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000da4 	.word	0x20000da4
 80048e0:	20000dd0 	.word	0x20000dd0
 80048e4:	20000db8 	.word	0x20000db8

080048e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3354      	adds	r3, #84	@ 0x54
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f849 	bl	800598c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	4618      	mov	r0, r3
 800490a:	f000 ff01 	bl	8005710 <vPortFree>
				vPortFree( pxTCB );
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fefe 	bl	8005710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004914:	e019      	b.n	800494a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800491c:	2b01      	cmp	r3, #1
 800491e:	d103      	bne.n	8004928 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fef5 	bl	8005710 <vPortFree>
	}
 8004926:	e010      	b.n	800494a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800492e:	2b02      	cmp	r3, #2
 8004930:	d00b      	beq.n	800494a <prvDeleteTCB+0x62>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60fb      	str	r3, [r7, #12]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <prvDeleteTCB+0x5e>
	}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495a:	4b0e      	ldr	r3, [pc, #56]	@ (8004994 <prvResetNextTaskUnblockTime+0x40>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <prvResetNextTaskUnblockTime+0x14>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <prvResetNextTaskUnblockTime+0x16>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800496e:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <prvResetNextTaskUnblockTime+0x44>)
 8004970:	f04f 32ff 	mov.w	r2, #4294967295
 8004974:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004976:	e008      	b.n	800498a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004978:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <prvResetNextTaskUnblockTime+0x40>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <prvResetNextTaskUnblockTime+0x44>)
 8004988:	6013      	str	r3, [r2, #0]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	20000d88 	.word	0x20000d88
 8004998:	20000df0 	.word	0x20000df0

0800499c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <xTaskGetSchedulerState+0x34>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049aa:	2301      	movs	r3, #1
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e008      	b.n	80049c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b0:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <xTaskGetSchedulerState+0x38>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049b8:	2302      	movs	r3, #2
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e001      	b.n	80049c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049c2:	687b      	ldr	r3, [r7, #4]
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000ddc 	.word	0x20000ddc
 80049d4:	20000df8 	.word	0x20000df8

080049d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d058      	beq.n	8004aa0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ee:	4b2f      	ldr	r3, [pc, #188]	@ (8004aac <xTaskPriorityDisinherit+0xd4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d00b      	beq.n	8004a10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60fb      	str	r3, [r7, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60bb      	str	r3, [r7, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d02c      	beq.n	8004aa0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d128      	bne.n	8004aa0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe fc2e 	bl	80032b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a70:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab0 <xTaskPriorityDisinherit+0xd8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d903      	bls.n	8004a80 <xTaskPriorityDisinherit+0xa8>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab0 <xTaskPriorityDisinherit+0xd8>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <xTaskPriorityDisinherit+0xdc>)
 8004a8e:	441a      	add	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe fbb1 	bl	80031fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aa0:	697b      	ldr	r3, [r7, #20]
	}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200008fc 	.word	0x200008fc
 8004ab0:	20000dd8 	.word	0x20000dd8
 8004ab4:	20000900 	.word	0x20000900

08004ab8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac2:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac8:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fbf0 	bl	80032b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d10a      	bne.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4819      	ldr	r0, [pc, #100]	@ (8004b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8004aec:	f7fe fb87 	bl	80031fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004af0:	e026      	b.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004afa:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d209      	bcs.n	8004b1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0a:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fe fb94 	bl	8003244 <vListInsert>
}
 8004b1c:	e010      	b.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe fb8a 	bl	8003244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b30:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d202      	bcs.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b3a:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000dd4 	.word	0x20000dd4
 8004b4c:	200008fc 	.word	0x200008fc
 8004b50:	20000dbc 	.word	0x20000dbc
 8004b54:	20000d8c 	.word	0x20000d8c
 8004b58:	20000d88 	.word	0x20000d88
 8004b5c:	20000df0 	.word	0x20000df0

08004b60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	@ 0x28
 8004b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b6a:	f000 fad9 	bl	8005120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004be4 <xTimerCreateTimerTask+0x84>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d021      	beq.n	8004bba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	f107 0108 	add.w	r1, r7, #8
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe faf3 	bl	8003174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	9202      	str	r2, [sp, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2302      	movs	r3, #2
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	4911      	ldr	r1, [pc, #68]	@ (8004be8 <xTimerCreateTimerTask+0x88>)
 8004ba2:	4812      	ldr	r0, [pc, #72]	@ (8004bec <xTimerCreateTimerTask+0x8c>)
 8004ba4:	f7ff f8a6 	bl	8003cf4 <xTaskCreateStatic>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <xTimerCreateTimerTask+0x90>)
 8004bac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <xTimerCreateTimerTask+0x90>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bd8:	697b      	ldr	r3, [r7, #20]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000e2c 	.word	0x20000e2c
 8004be8:	080063f8 	.word	0x080063f8
 8004bec:	08004d15 	.word	0x08004d15
 8004bf0:	20000e30 	.word	0x20000e30

08004bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <xTimerGenericCommand+0x30>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02a      	beq.n	8004c82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	dc18      	bgt.n	8004c70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c3e:	f7ff fead 	bl	800499c <xTaskGetSchedulerState>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d109      	bne.n	8004c5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c48:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	f107 0110 	add.w	r1, r7, #16
 8004c50:	2300      	movs	r3, #0
 8004c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c54:	f7fe fc62 	bl	800351c <xQueueGenericSend>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c5a:	e012      	b.n	8004c82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	f107 0110 	add.w	r1, r7, #16
 8004c64:	2300      	movs	r3, #0
 8004c66:	2200      	movs	r2, #0
 8004c68:	f7fe fc58 	bl	800351c <xQueueGenericSend>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c6e:	e008      	b.n	8004c82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	f107 0110 	add.w	r1, r7, #16
 8004c78:	2300      	movs	r3, #0
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	f7fe fd50 	bl	8003720 <xQueueGenericSendFromISR>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	@ 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000e2c 	.word	0x20000e2c

08004c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <prvProcessExpiredTimer+0x80>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fb03 	bl	80032b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d123      	bne.n	8004cfe <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	18d1      	adds	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f000 f8cc 	bl	8004e60 <prvInsertTimerInActiveList>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d017      	beq.n	8004cfe <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	6978      	ldr	r0, [r7, #20]
 8004cda:	f7ff ff8b 	bl	8004bf4 <xTimerGenericCommand>
 8004cde:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	4798      	blx	r3
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000e24 	.word	0x20000e24

08004d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f859 	bl	8004dd8 <prvGetNextExpireTime>
 8004d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f805 	bl	8004d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d32:	f000 f8d7 	bl	8004ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d36:	bf00      	nop
 8004d38:	e7f0      	b.n	8004d1c <prvTimerTask+0x8>
	...

08004d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d46:	f7ff fa2f 	bl	80041a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f866 	bl	8004e20 <prvSampleTimeNow>
 8004d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d130      	bne.n	8004dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <prvProcessTimerOrBlockTask+0x3c>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d806      	bhi.n	8004d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d6a:	f7ff fa2b 	bl	80041c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff8d 	bl	8004c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d76:	e024      	b.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d7e:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <prvProcessTimerOrBlockTask+0x90>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d90:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <prvProcessTimerOrBlockTask+0x94>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f7fe ff75 	bl	8003c8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004da2:	f7ff fa0f 	bl	80041c4 <xTaskResumeAll>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <prvProcessTimerOrBlockTask+0x98>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
}
 8004dbc:	e001      	b.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dbe:	f7ff fa01 	bl	80041c4 <xTaskResumeAll>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000e28 	.word	0x20000e28
 8004dd0:	20000e2c 	.word	0x20000e2c
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004de0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e1c <prvGetNextExpireTime+0x44>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dfe:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <prvGetNextExpireTime+0x44>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e001      	b.n	8004e0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000e24 	.word	0x20000e24

08004e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e28:	f7ff fa6a 	bl	8004300 <xTaskGetTickCount>
 8004e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <prvSampleTimeNow+0x3c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d205      	bcs.n	8004e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e38:	f000 f910 	bl	800505c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e002      	b.n	8004e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e4a:	4a04      	ldr	r2, [pc, #16]	@ (8004e5c <prvSampleTimeNow+0x3c>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000e34 	.word	0x20000e34

08004e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d812      	bhi.n	8004eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e94:	2301      	movs	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e01b      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <prvInsertTimerInActiveList+0x7c>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7fe f9cd 	bl	8003244 <vListInsert>
 8004eaa:	e012      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d206      	bcs.n	8004ec2 <prvInsertTimerInActiveList+0x62>
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e007      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec2:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <prvInsertTimerInActiveList+0x80>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe f9b9 	bl	8003244 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000e28 	.word	0x20000e28
 8004ee0:	20000e24 	.word	0x20000e24

08004ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	@ 0x38
 8004ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eea:	e0a5      	b.n	8005038 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da19      	bge.n	8004f26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61fb      	str	r3, [r7, #28]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f1c:	6850      	ldr	r0, [r2, #4]
 8004f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f2c0 8085 	blt.w	8005038 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe f9b8 	bl	80032b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f44:	463b      	mov	r3, r7
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff6a 	bl	8004e20 <prvSampleTimeNow>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d86c      	bhi.n	800502e <prvProcessReceivedCommands+0x14a>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <prvProcessReceivedCommands+0x78>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	0800502f 	.word	0x0800502f
 8004f6c:	08004fe3 	.word	0x08004fe3
 8004f70:	0800501d 	.word	0x0800501d
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f85 	.word	0x08004f85
 8004f7c:	0800502f 	.word	0x0800502f
 8004f80:	08004fe3 	.word	0x08004fe3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	18d1      	adds	r1, r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f92:	f7ff ff65 	bl	8004e60 <prvInsertTimerInActiveList>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d04a      	beq.n	8005032 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d142      	bne.n	8005032 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2100      	movs	r1, #0
 8004fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fbe:	f7ff fe19 	bl	8004bf4 <xTimerGenericCommand>
 8004fc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d133      	bne.n	8005032 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	61bb      	str	r3, [r7, #24]
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	e7fd      	b.n	8004fde <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	617b      	str	r3, [r7, #20]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	18d1      	adds	r1, r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005016:	f7ff ff23 	bl	8004e60 <prvInsertTimerInActiveList>
					break;
 800501a:	e00d      	b.n	8005038 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005028:	f000 fb72 	bl	8005710 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800502c:	e003      	b.n	8005036 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <prvProcessReceivedCommands+0x154>
					break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <prvProcessReceivedCommands+0x154>
					break;
 8005036:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005038:	4b07      	ldr	r3, [pc, #28]	@ (8005058 <prvProcessReceivedCommands+0x174>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1d39      	adds	r1, r7, #4
 800503e:	2200      	movs	r2, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe fc09 	bl	8003858 <xQueueReceive>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f af4f 	bne.w	8004eec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	3730      	adds	r7, #48	@ 0x30
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000e2c 	.word	0x20000e2c

0800505c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005062:	e046      	b.n	80050f2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005064:	4b2c      	ldr	r3, [pc, #176]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800506e:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe f919 	bl	80032b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d12f      	bne.n	80050f2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d90e      	bls.n	80050c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050b0:	4b19      	ldr	r3, [pc, #100]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe f8c2 	bl	8003244 <vListInsert>
 80050c0:	e017      	b.n	80050f2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	2100      	movs	r1, #0
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff fd91 	bl	8004bf4 <xTimerGenericCommand>
 80050d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	603b      	str	r3, [r7, #0]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1b3      	bne.n	8005064 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <prvSwitchTimerLists+0xc0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <prvSwitchTimerLists+0xbc>)
 8005108:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800510a:	4a04      	ldr	r2, [pc, #16]	@ (800511c <prvSwitchTimerLists+0xc0>)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000e24 	.word	0x20000e24
 800511c:	20000e28 	.word	0x20000e28

08005120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005126:	f000 f929 	bl	800537c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <prvCheckForValidListAndQueue+0x60>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d120      	bne.n	8005174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005132:	4814      	ldr	r0, [pc, #80]	@ (8005184 <prvCheckForValidListAndQueue+0x64>)
 8005134:	f7fe f838 	bl	80031a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005138:	4813      	ldr	r0, [pc, #76]	@ (8005188 <prvCheckForValidListAndQueue+0x68>)
 800513a:	f7fe f835 	bl	80031a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800513e:	4b13      	ldr	r3, [pc, #76]	@ (800518c <prvCheckForValidListAndQueue+0x6c>)
 8005140:	4a10      	ldr	r2, [pc, #64]	@ (8005184 <prvCheckForValidListAndQueue+0x64>)
 8005142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005144:	4b12      	ldr	r3, [pc, #72]	@ (8005190 <prvCheckForValidListAndQueue+0x70>)
 8005146:	4a10      	ldr	r2, [pc, #64]	@ (8005188 <prvCheckForValidListAndQueue+0x68>)
 8005148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <prvCheckForValidListAndQueue+0x74>)
 8005150:	4a11      	ldr	r2, [pc, #68]	@ (8005198 <prvCheckForValidListAndQueue+0x78>)
 8005152:	2110      	movs	r1, #16
 8005154:	200a      	movs	r0, #10
 8005156:	f7fe f941 	bl	80033dc <xQueueGenericCreateStatic>
 800515a:	4603      	mov	r3, r0
 800515c:	4a08      	ldr	r2, [pc, #32]	@ (8005180 <prvCheckForValidListAndQueue+0x60>)
 800515e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <prvCheckForValidListAndQueue+0x60>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <prvCheckForValidListAndQueue+0x60>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	490b      	ldr	r1, [pc, #44]	@ (800519c <prvCheckForValidListAndQueue+0x7c>)
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fd64 	bl	8003c3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005174:	f000 f932 	bl	80053dc <vPortExitCritical>
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000e2c 	.word	0x20000e2c
 8005184:	20000dfc 	.word	0x20000dfc
 8005188:	20000e10 	.word	0x20000e10
 800518c:	20000e24 	.word	0x20000e24
 8005190:	20000e28 	.word	0x20000e28
 8005194:	20000ed8 	.word	0x20000ed8
 8005198:	20000e38 	.word	0x20000e38
 800519c:	08006400 	.word	0x08006400

080051a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b04      	subs	r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b04      	subs	r3, #4
 80051be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051d0:	4a08      	ldr	r2, [pc, #32]	@ (80051f4 <pxPortInitialiseStack+0x54>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3b14      	subs	r3, #20
 80051da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3b20      	subs	r3, #32
 80051e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051e8:	68fb      	ldr	r3, [r7, #12]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	080051f9 	.word	0x080051f9

080051f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <prvTaskExitError+0x54>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d00b      	beq.n	8005224 <prvTaskExitError+0x2c>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60fb      	str	r3, [r7, #12]
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <prvTaskExitError+0x28>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60bb      	str	r3, [r7, #8]
}
 8005236:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005238:	bf00      	nop
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0fc      	beq.n	800523a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	2000000c 	.word	0x2000000c

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	f04e 0e0d 	orr.w	lr, lr, #13
 800526e:	4770      	bx	lr

08005270 <pxCurrentTCBConst2>:
 8005270:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005278:	4806      	ldr	r0, [pc, #24]	@ (8005294 <prvPortStartFirstTask+0x1c>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	b662      	cpsie	i
 8005284:	b661      	cpsie	f
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	df00      	svc	0
 8005290:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005292:	bf00      	nop
 8005294:	e000ed08 	.word	0xe000ed08

08005298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800529e:	4b32      	ldr	r3, [pc, #200]	@ (8005368 <xPortStartScheduler+0xd0>)
 80052a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	@ 0xff
 80052ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b2a      	ldr	r3, [pc, #168]	@ (800536c <xPortStartScheduler+0xd4>)
 80052c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005370 <xPortStartScheduler+0xd8>)
 80052c8:	2207      	movs	r2, #7
 80052ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052cc:	e009      	b.n	80052e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052ce:	4b28      	ldr	r3, [pc, #160]	@ (8005370 <xPortStartScheduler+0xd8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a26      	ldr	r2, [pc, #152]	@ (8005370 <xPortStartScheduler+0xd8>)
 80052d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d0ef      	beq.n	80052ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ee:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <xPortStartScheduler+0xd8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f1c3 0307 	rsb	r3, r3, #7
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d00b      	beq.n	8005312 <xPortStartScheduler+0x7a>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60bb      	str	r3, [r7, #8]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005312:	4b17      	ldr	r3, [pc, #92]	@ (8005370 <xPortStartScheduler+0xd8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <xPortStartScheduler+0xd8>)
 800531a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800531c:	4b14      	ldr	r3, [pc, #80]	@ (8005370 <xPortStartScheduler+0xd8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005324:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <xPortStartScheduler+0xd8>)
 8005326:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005330:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <xPortStartScheduler+0xdc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <xPortStartScheduler+0xdc>)
 8005336:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800533a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <xPortStartScheduler+0xdc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0c      	ldr	r2, [pc, #48]	@ (8005374 <xPortStartScheduler+0xdc>)
 8005342:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005346:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005348:	f000 f8b8 	bl	80054bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <xPortStartScheduler+0xe0>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005352:	f7ff ff91 	bl	8005278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005356:	f7ff f8a1 	bl	800449c <vTaskSwitchContext>
	prvTaskExitError();
 800535a:	f7ff ff4d 	bl	80051f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000e400 	.word	0xe000e400
 800536c:	20000f28 	.word	0x20000f28
 8005370:	20000f2c 	.word	0x20000f2c
 8005374:	e000ed20 	.word	0xe000ed20
 8005378:	2000000c 	.word	0x2000000c

0800537c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	607b      	str	r3, [r7, #4]
}
 8005394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005396:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <vPortEnterCritical+0x58>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	4a0d      	ldr	r2, [pc, #52]	@ (80053d4 <vPortEnterCritical+0x58>)
 800539e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053a0:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <vPortEnterCritical+0x58>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d110      	bne.n	80053ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <vPortEnterCritical+0x5c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <vPortEnterCritical+0x4e>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	603b      	str	r3, [r7, #0]
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	e7fd      	b.n	80053c6 <vPortEnterCritical+0x4a>
	}
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	2000000c 	.word	0x2000000c
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053e2:	4b12      	ldr	r3, [pc, #72]	@ (800542c <vPortExitCritical+0x50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vPortExitCritical+0x26>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	607b      	str	r3, [r7, #4]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a08      	ldr	r2, [pc, #32]	@ (800542c <vPortExitCritical+0x50>)
 800540a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vPortExitCritical+0x50>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <vPortExitCritical+0x44>
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	2000000c 	.word	0x2000000c

08005430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005430:	f3ef 8009 	mrs	r0, PSP
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <pxCurrentTCBConst>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005440:	6010      	str	r0, [r2, #0]
 8005442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005446:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800544a:	f380 8811 	msr	BASEPRI, r0
 800544e:	f7ff f825 	bl	800449c <vTaskSwitchContext>
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f380 8811 	msr	BASEPRI, r0
 800545a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	6808      	ldr	r0, [r1, #0]
 8005462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005466:	f380 8809 	msr	PSP, r0
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	4770      	bx	lr

08005470 <pxCurrentTCBConst>:
 8005470:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005492:	f7fe ff43 	bl	800431c <xTaskIncrementTick>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <SysTick_Handler+0x40>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054c0:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <vPortSetupTimerInterrupt+0x30>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054c6:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <vPortSetupTimerInterrupt+0x34>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <vPortSetupTimerInterrupt+0x38>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <vPortSetupTimerInterrupt+0x3c>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <vPortSetupTimerInterrupt+0x40>)
 80054da:	3b01      	subs	r3, #1
 80054dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054de:	4b03      	ldr	r3, [pc, #12]	@ (80054ec <vPortSetupTimerInterrupt+0x30>)
 80054e0:	2207      	movs	r2, #7
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr
 80054ec:	e000e010 	.word	0xe000e010
 80054f0:	e000e018 	.word	0xe000e018
 80054f4:	20000000 	.word	0x20000000
 80054f8:	10624dd3 	.word	0x10624dd3
 80054fc:	e000e014 	.word	0xe000e014

08005500 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005506:	f3ef 8305 	mrs	r3, IPSR
 800550a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	d915      	bls.n	800553e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <vPortValidateInterruptPriority+0x70>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800551c:	4b15      	ldr	r3, [pc, #84]	@ (8005574 <vPortValidateInterruptPriority+0x74>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	7afa      	ldrb	r2, [r7, #11]
 8005522:	429a      	cmp	r2, r3
 8005524:	d20b      	bcs.n	800553e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	607b      	str	r3, [r7, #4]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800553e:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <vPortValidateInterruptPriority+0x78>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <vPortValidateInterruptPriority+0x7c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d90b      	bls.n	8005566 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	603b      	str	r3, [r7, #0]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <vPortValidateInterruptPriority+0x62>
	}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	e000e3f0 	.word	0xe000e3f0
 8005574:	20000f28 	.word	0x20000f28
 8005578:	e000ed0c 	.word	0xe000ed0c
 800557c:	20000f2c 	.word	0x20000f2c

08005580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800558c:	f7fe fe0c 	bl	80041a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005590:	4b5a      	ldr	r3, [pc, #360]	@ (80056fc <pvPortMalloc+0x17c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005598:	f000 f916 	bl	80057c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800559c:	4b58      	ldr	r3, [pc, #352]	@ (8005700 <pvPortMalloc+0x180>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f040 8090 	bne.w	80056ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01e      	beq.n	80055ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055b0:	2208      	movs	r2, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	3308      	adds	r3, #8
 80055ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <pvPortMalloc+0x6e>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	617b      	str	r3, [r7, #20]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d06a      	beq.n	80056ca <pvPortMalloc+0x14a>
 80055f4:	4b43      	ldr	r3, [pc, #268]	@ (8005704 <pvPortMalloc+0x184>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d865      	bhi.n	80056ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055fe:	4b42      	ldr	r3, [pc, #264]	@ (8005708 <pvPortMalloc+0x188>)
 8005600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005602:	4b41      	ldr	r3, [pc, #260]	@ (8005708 <pvPortMalloc+0x188>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005608:	e004      	b.n	8005614 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <pvPortMalloc+0xa6>
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f1      	bne.n	800560a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005626:	4b35      	ldr	r3, [pc, #212]	@ (80056fc <pvPortMalloc+0x17c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562c:	429a      	cmp	r2, r3
 800562e:	d04c      	beq.n	80056ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	4413      	add	r3, r2
 8005638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	2308      	movs	r3, #8
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d920      	bls.n	8005694 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4413      	add	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <pvPortMalloc+0xfc>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	613b      	str	r3, [r7, #16]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800568e:	69b8      	ldr	r0, [r7, #24]
 8005690:	f000 f8fc 	bl	800588c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <pvPortMalloc+0x184>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a19      	ldr	r2, [pc, #100]	@ (8005704 <pvPortMalloc+0x184>)
 80056a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056a2:	4b18      	ldr	r3, [pc, #96]	@ (8005704 <pvPortMalloc+0x184>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b19      	ldr	r3, [pc, #100]	@ (800570c <pvPortMalloc+0x18c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d203      	bcs.n	80056b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ae:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <pvPortMalloc+0x184>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a16      	ldr	r2, [pc, #88]	@ (800570c <pvPortMalloc+0x18c>)
 80056b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <pvPortMalloc+0x180>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	431a      	orrs	r2, r3
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ca:	f7fe fd7b 	bl	80041c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <pvPortMalloc+0x170>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <pvPortMalloc+0x16c>
	return pvReturn;
 80056f0:	69fb      	ldr	r3, [r7, #28]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3728      	adds	r7, #40	@ 0x28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20001d48 	.word	0x20001d48
 8005700:	20001d54 	.word	0x20001d54
 8005704:	20001d4c 	.word	0x20001d4c
 8005708:	20001d40 	.word	0x20001d40
 800570c:	20001d50 	.word	0x20001d50

08005710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d04a      	beq.n	80057b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005722:	2308      	movs	r3, #8
 8005724:	425b      	negs	r3, r3
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4413      	add	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <vPortFree+0xb0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <vPortFree+0x46>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60fb      	str	r3, [r7, #12]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <vPortFree+0x66>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60bb      	str	r3, [r7, #8]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <vPortFree+0xb0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d019      	beq.n	80057b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d115      	bne.n	80057b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <vPortFree+0xb0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	43db      	mvns	r3, r3
 8005796:	401a      	ands	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800579c:	f7fe fd04 	bl	80041a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <vPortFree+0xb4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4413      	add	r3, r2
 80057aa:	4a06      	ldr	r2, [pc, #24]	@ (80057c4 <vPortFree+0xb4>)
 80057ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f000 f86c 	bl	800588c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057b4:	f7fe fd06 	bl	80041c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057b8:	bf00      	nop
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20001d54 	.word	0x20001d54
 80057c4:	20001d4c 	.word	0x20001d4c

080057c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ce:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80057d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057d4:	4b27      	ldr	r3, [pc, #156]	@ (8005874 <prvHeapInit+0xac>)
 80057d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00c      	beq.n	80057fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3307      	adds	r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005874 <prvHeapInit+0xac>)
 80057f8:	4413      	add	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005800:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <prvHeapInit+0xb0>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005806:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <prvHeapInit+0xb0>)
 8005808:	2200      	movs	r2, #0
 800580a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005814:	2208      	movs	r2, #8
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a15      	ldr	r2, [pc, #84]	@ (800587c <prvHeapInit+0xb4>)
 8005828:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800582a:	4b14      	ldr	r3, [pc, #80]	@ (800587c <prvHeapInit+0xb4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005832:	4b12      	ldr	r3, [pc, #72]	@ (800587c <prvHeapInit+0xb4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005848:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <prvHeapInit+0xb4>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <prvHeapInit+0xb8>)
 8005856:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4a09      	ldr	r2, [pc, #36]	@ (8005884 <prvHeapInit+0xbc>)
 800585e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005860:	4b09      	ldr	r3, [pc, #36]	@ (8005888 <prvHeapInit+0xc0>)
 8005862:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005866:	601a      	str	r2, [r3, #0]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000f30 	.word	0x20000f30
 8005878:	20001d40 	.word	0x20001d40
 800587c:	20001d48 	.word	0x20001d48
 8005880:	20001d50 	.word	0x20001d50
 8005884:	20001d4c 	.word	0x20001d4c
 8005888:	20001d54 	.word	0x20001d54

0800588c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005894:	4b27      	ldr	r3, [pc, #156]	@ (8005934 <prvInsertBlockIntoFreeList+0xa8>)
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e002      	b.n	80058a0 <prvInsertBlockIntoFreeList+0x14>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d8f7      	bhi.n	800589a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4413      	add	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d108      	bne.n	80058ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	441a      	add	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d118      	bne.n	8005914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b14      	ldr	r3, [pc, #80]	@ (8005938 <prvInsertBlockIntoFreeList+0xac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d00d      	beq.n	800590a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	441a      	add	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e008      	b.n	800591c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800590a:	4b0b      	ldr	r3, [pc, #44]	@ (8005938 <prvInsertBlockIntoFreeList+0xac>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e003      	b.n	800591c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d002      	beq.n	800592a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800592a:	bf00      	nop
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr
 8005934:	20001d40 	.word	0x20001d40
 8005938:	20001d48 	.word	0x20001d48

0800593c <siprintf>:
 800593c:	b40e      	push	{r1, r2, r3}
 800593e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005942:	b500      	push	{lr}
 8005944:	b09c      	sub	sp, #112	@ 0x70
 8005946:	ab1d      	add	r3, sp, #116	@ 0x74
 8005948:	9002      	str	r0, [sp, #8]
 800594a:	9006      	str	r0, [sp, #24]
 800594c:	9107      	str	r1, [sp, #28]
 800594e:	9104      	str	r1, [sp, #16]
 8005950:	4808      	ldr	r0, [pc, #32]	@ (8005974 <siprintf+0x38>)
 8005952:	4909      	ldr	r1, [pc, #36]	@ (8005978 <siprintf+0x3c>)
 8005954:	f853 2b04 	ldr.w	r2, [r3], #4
 8005958:	9105      	str	r1, [sp, #20]
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	a902      	add	r1, sp, #8
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	f000 f9f6 	bl	8005d50 <_svfiprintf_r>
 8005964:	2200      	movs	r2, #0
 8005966:	9b02      	ldr	r3, [sp, #8]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	b01c      	add	sp, #112	@ 0x70
 800596c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005970:	b003      	add	sp, #12
 8005972:	4770      	bx	lr
 8005974:	20000010 	.word	0x20000010
 8005978:	ffff0208 	.word	0xffff0208

0800597c <memset>:
 800597c:	4603      	mov	r3, r0
 800597e:	4402      	add	r2, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <_reclaim_reent>:
 800598c:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <_reclaim_reent+0xa8>)
 800598e:	b570      	push	{r4, r5, r6, lr}
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4604      	mov	r4, r0
 8005994:	4283      	cmp	r3, r0
 8005996:	d04b      	beq.n	8005a30 <_reclaim_reent+0xa4>
 8005998:	69c3      	ldr	r3, [r0, #28]
 800599a:	b1ab      	cbz	r3, 80059c8 <_reclaim_reent+0x3c>
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	b16b      	cbz	r3, 80059bc <_reclaim_reent+0x30>
 80059a0:	2500      	movs	r5, #0
 80059a2:	69e3      	ldr	r3, [r4, #28]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	5959      	ldr	r1, [r3, r5]
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d13b      	bne.n	8005a24 <_reclaim_reent+0x98>
 80059ac:	3504      	adds	r5, #4
 80059ae:	2d80      	cmp	r5, #128	@ 0x80
 80059b0:	d1f7      	bne.n	80059a2 <_reclaim_reent+0x16>
 80059b2:	69e3      	ldr	r3, [r4, #28]
 80059b4:	4620      	mov	r0, r4
 80059b6:	68d9      	ldr	r1, [r3, #12]
 80059b8:	f000 f878 	bl	8005aac <_free_r>
 80059bc:	69e3      	ldr	r3, [r4, #28]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	b111      	cbz	r1, 80059c8 <_reclaim_reent+0x3c>
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 f872 	bl	8005aac <_free_r>
 80059c8:	6961      	ldr	r1, [r4, #20]
 80059ca:	b111      	cbz	r1, 80059d2 <_reclaim_reent+0x46>
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 f86d 	bl	8005aac <_free_r>
 80059d2:	69e1      	ldr	r1, [r4, #28]
 80059d4:	b111      	cbz	r1, 80059dc <_reclaim_reent+0x50>
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 f868 	bl	8005aac <_free_r>
 80059dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059de:	b111      	cbz	r1, 80059e6 <_reclaim_reent+0x5a>
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 f863 	bl	8005aac <_free_r>
 80059e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059e8:	b111      	cbz	r1, 80059f0 <_reclaim_reent+0x64>
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 f85e 	bl	8005aac <_free_r>
 80059f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059f2:	b111      	cbz	r1, 80059fa <_reclaim_reent+0x6e>
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 f859 	bl	8005aac <_free_r>
 80059fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80059fc:	b111      	cbz	r1, 8005a04 <_reclaim_reent+0x78>
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f854 	bl	8005aac <_free_r>
 8005a04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a06:	b111      	cbz	r1, 8005a0e <_reclaim_reent+0x82>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 f84f 	bl	8005aac <_free_r>
 8005a0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a10:	b111      	cbz	r1, 8005a18 <_reclaim_reent+0x8c>
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 f84a 	bl	8005aac <_free_r>
 8005a18:	6a23      	ldr	r3, [r4, #32]
 8005a1a:	b14b      	cbz	r3, 8005a30 <_reclaim_reent+0xa4>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a22:	4718      	bx	r3
 8005a24:	680e      	ldr	r6, [r1, #0]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f840 	bl	8005aac <_free_r>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	e7bb      	b.n	80059a8 <_reclaim_reent+0x1c>
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010

08005a38 <__errno>:
 8005a38:	4b01      	ldr	r3, [pc, #4]	@ (8005a40 <__errno+0x8>)
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000010 	.word	0x20000010

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	2600      	movs	r6, #0
 8005a48:	4d0c      	ldr	r5, [pc, #48]	@ (8005a7c <__libc_init_array+0x38>)
 8005a4a:	4c0d      	ldr	r4, [pc, #52]	@ (8005a80 <__libc_init_array+0x3c>)
 8005a4c:	1b64      	subs	r4, r4, r5
 8005a4e:	10a4      	asrs	r4, r4, #2
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	f000 fc78 	bl	8006348 <_init>
 8005a58:	2600      	movs	r6, #0
 8005a5a:	4d0a      	ldr	r5, [pc, #40]	@ (8005a84 <__libc_init_array+0x40>)
 8005a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8005a88 <__libc_init_array+0x44>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	08006530 	.word	0x08006530
 8005a80:	08006530 	.word	0x08006530
 8005a84:	08006530 	.word	0x08006530
 8005a88:	08006534 	.word	0x08006534

08005a8c <__retarget_lock_acquire_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <__retarget_lock_release_recursive>:
 8005a8e:	4770      	bx	lr

08005a90 <memcpy>:
 8005a90:	440a      	add	r2, r1
 8005a92:	4291      	cmp	r1, r2
 8005a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a98:	d100      	bne.n	8005a9c <memcpy+0xc>
 8005a9a:	4770      	bx	lr
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa8:	d1f9      	bne.n	8005a9e <memcpy+0xe>
 8005aaa:	bd10      	pop	{r4, pc}

08005aac <_free_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4605      	mov	r5, r0
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d040      	beq.n	8005b36 <_free_r+0x8a>
 8005ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab8:	1f0c      	subs	r4, r1, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bfb8      	it	lt
 8005abe:	18e4      	addlt	r4, r4, r3
 8005ac0:	f000 f8de 	bl	8005c80 <__malloc_lock>
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <_free_r+0x8c>)
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	b933      	cbnz	r3, 8005ad8 <_free_r+0x2c>
 8005aca:	6063      	str	r3, [r4, #4]
 8005acc:	6014      	str	r4, [r2, #0]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad4:	f000 b8da 	b.w	8005c8c <__malloc_unlock>
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d908      	bls.n	8005aee <_free_r+0x42>
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	1821      	adds	r1, r4, r0
 8005ae0:	428b      	cmp	r3, r1
 8005ae2:	bf01      	itttt	eq
 8005ae4:	6819      	ldreq	r1, [r3, #0]
 8005ae6:	685b      	ldreq	r3, [r3, #4]
 8005ae8:	1809      	addeq	r1, r1, r0
 8005aea:	6021      	streq	r1, [r4, #0]
 8005aec:	e7ed      	b.n	8005aca <_free_r+0x1e>
 8005aee:	461a      	mov	r2, r3
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	b10b      	cbz	r3, 8005af8 <_free_r+0x4c>
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d9fa      	bls.n	8005aee <_free_r+0x42>
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	1850      	adds	r0, r2, r1
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d10b      	bne.n	8005b18 <_free_r+0x6c>
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	4401      	add	r1, r0
 8005b04:	1850      	adds	r0, r2, r1
 8005b06:	4283      	cmp	r3, r0
 8005b08:	6011      	str	r1, [r2, #0]
 8005b0a:	d1e0      	bne.n	8005ace <_free_r+0x22>
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4408      	add	r0, r1
 8005b12:	6010      	str	r0, [r2, #0]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	e7da      	b.n	8005ace <_free_r+0x22>
 8005b18:	d902      	bls.n	8005b20 <_free_r+0x74>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	e7d6      	b.n	8005ace <_free_r+0x22>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	1821      	adds	r1, r4, r0
 8005b24:	428b      	cmp	r3, r1
 8005b26:	bf01      	itttt	eq
 8005b28:	6819      	ldreq	r1, [r3, #0]
 8005b2a:	685b      	ldreq	r3, [r3, #4]
 8005b2c:	1809      	addeq	r1, r1, r0
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	6054      	str	r4, [r2, #4]
 8005b34:	e7cb      	b.n	8005ace <_free_r+0x22>
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20001e9c 	.word	0x20001e9c

08005b3c <sbrk_aligned>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b7c <sbrk_aligned+0x40>)
 8005b40:	460c      	mov	r4, r1
 8005b42:	6831      	ldr	r1, [r6, #0]
 8005b44:	4605      	mov	r5, r0
 8005b46:	b911      	cbnz	r1, 8005b4e <sbrk_aligned+0x12>
 8005b48:	f000 fbaa 	bl	80062a0 <_sbrk_r>
 8005b4c:	6030      	str	r0, [r6, #0]
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 fba5 	bl	80062a0 <_sbrk_r>
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	d103      	bne.n	8005b62 <sbrk_aligned+0x26>
 8005b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	1cc4      	adds	r4, r0, #3
 8005b64:	f024 0403 	bic.w	r4, r4, #3
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d0f8      	beq.n	8005b5e <sbrk_aligned+0x22>
 8005b6c:	1a21      	subs	r1, r4, r0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fb96 	bl	80062a0 <_sbrk_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d1f2      	bne.n	8005b5e <sbrk_aligned+0x22>
 8005b78:	e7ef      	b.n	8005b5a <sbrk_aligned+0x1e>
 8005b7a:	bf00      	nop
 8005b7c:	20001e98 	.word	0x20001e98

08005b80 <_malloc_r>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	1ccd      	adds	r5, r1, #3
 8005b86:	f025 0503 	bic.w	r5, r5, #3
 8005b8a:	3508      	adds	r5, #8
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	bf38      	it	cc
 8005b90:	250c      	movcc	r5, #12
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	4606      	mov	r6, r0
 8005b96:	db01      	blt.n	8005b9c <_malloc_r+0x1c>
 8005b98:	42a9      	cmp	r1, r5
 8005b9a:	d904      	bls.n	8005ba6 <_malloc_r+0x26>
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c7c <_malloc_r+0xfc>
 8005baa:	f000 f869 	bl	8005c80 <__malloc_lock>
 8005bae:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	bb44      	cbnz	r4, 8005c08 <_malloc_r+0x88>
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffbf 	bl	8005b3c <sbrk_aligned>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	d158      	bne.n	8005c76 <_malloc_r+0xf6>
 8005bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc8:	4627      	mov	r7, r4
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	d143      	bne.n	8005c56 <_malloc_r+0xd6>
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	d04b      	beq.n	8005c6a <_malloc_r+0xea>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	eb04 0903 	add.w	r9, r4, r3
 8005bdc:	f000 fb60 	bl	80062a0 <_sbrk_r>
 8005be0:	4581      	cmp	r9, r0
 8005be2:	d142      	bne.n	8005c6a <_malloc_r+0xea>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	4630      	mov	r0, r6
 8005be8:	1a6d      	subs	r5, r5, r1
 8005bea:	4629      	mov	r1, r5
 8005bec:	f7ff ffa6 	bl	8005b3c <sbrk_aligned>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d03a      	beq.n	8005c6a <_malloc_r+0xea>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	442b      	add	r3, r5
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	bb62      	cbnz	r2, 8005c5c <_malloc_r+0xdc>
 8005c02:	f8c8 7000 	str.w	r7, [r8]
 8005c06:	e00f      	b.n	8005c28 <_malloc_r+0xa8>
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	1b52      	subs	r2, r2, r5
 8005c0c:	d420      	bmi.n	8005c50 <_malloc_r+0xd0>
 8005c0e:	2a0b      	cmp	r2, #11
 8005c10:	d917      	bls.n	8005c42 <_malloc_r+0xc2>
 8005c12:	1961      	adds	r1, r4, r5
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	6025      	str	r5, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	6059      	strne	r1, [r3, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	bf08      	it	eq
 8005c20:	f8c8 1000 	streq.w	r1, [r8]
 8005c24:	5162      	str	r2, [r4, r5]
 8005c26:	604b      	str	r3, [r1, #4]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 f82f 	bl	8005c8c <__malloc_unlock>
 8005c2e:	f104 000b 	add.w	r0, r4, #11
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	f020 0007 	bic.w	r0, r0, #7
 8005c38:	1ac2      	subs	r2, r0, r3
 8005c3a:	bf1c      	itt	ne
 8005c3c:	1a1b      	subne	r3, r3, r0
 8005c3e:	50a3      	strne	r3, [r4, r2]
 8005c40:	e7af      	b.n	8005ba2 <_malloc_r+0x22>
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	bf0c      	ite	eq
 8005c48:	f8c8 2000 	streq.w	r2, [r8]
 8005c4c:	605a      	strne	r2, [r3, #4]
 8005c4e:	e7eb      	b.n	8005c28 <_malloc_r+0xa8>
 8005c50:	4623      	mov	r3, r4
 8005c52:	6864      	ldr	r4, [r4, #4]
 8005c54:	e7ae      	b.n	8005bb4 <_malloc_r+0x34>
 8005c56:	463c      	mov	r4, r7
 8005c58:	687f      	ldr	r7, [r7, #4]
 8005c5a:	e7b6      	b.n	8005bca <_malloc_r+0x4a>
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d1fb      	bne.n	8005c5c <_malloc_r+0xdc>
 8005c64:	2300      	movs	r3, #0
 8005c66:	6053      	str	r3, [r2, #4]
 8005c68:	e7de      	b.n	8005c28 <_malloc_r+0xa8>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	f000 f80c 	bl	8005c8c <__malloc_unlock>
 8005c74:	e794      	b.n	8005ba0 <_malloc_r+0x20>
 8005c76:	6005      	str	r5, [r0, #0]
 8005c78:	e7d6      	b.n	8005c28 <_malloc_r+0xa8>
 8005c7a:	bf00      	nop
 8005c7c:	20001e9c 	.word	0x20001e9c

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__malloc_lock+0x8>)
 8005c82:	f7ff bf03 	b.w	8005a8c <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	20001e94 	.word	0x20001e94

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f7ff befe 	b.w	8005a8e <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	20001e94 	.word	0x20001e94

08005c98 <__ssputs_r>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	461f      	mov	r7, r3
 8005c9e:	688e      	ldr	r6, [r1, #8]
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	42be      	cmp	r6, r7
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	4690      	mov	r8, r2
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	d82d      	bhi.n	8005d08 <__ssputs_r+0x70>
 8005cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cb4:	d026      	beq.n	8005d04 <__ssputs_r+0x6c>
 8005cb6:	6965      	ldr	r5, [r4, #20]
 8005cb8:	6909      	ldr	r1, [r1, #16]
 8005cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cbe:	eba3 0901 	sub.w	r9, r3, r1
 8005cc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc6:	1c7b      	adds	r3, r7, #1
 8005cc8:	444b      	add	r3, r9
 8005cca:	106d      	asrs	r5, r5, #1
 8005ccc:	429d      	cmp	r5, r3
 8005cce:	bf38      	it	cc
 8005cd0:	461d      	movcc	r5, r3
 8005cd2:	0553      	lsls	r3, r2, #21
 8005cd4:	d527      	bpl.n	8005d26 <__ssputs_r+0x8e>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7ff ff52 	bl	8005b80 <_malloc_r>
 8005cdc:	4606      	mov	r6, r0
 8005cde:	b360      	cbz	r0, 8005d3a <__ssputs_r+0xa2>
 8005ce0:	464a      	mov	r2, r9
 8005ce2:	6921      	ldr	r1, [r4, #16]
 8005ce4:	f7ff fed4 	bl	8005a90 <memcpy>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	6126      	str	r6, [r4, #16]
 8005cf6:	444e      	add	r6, r9
 8005cf8:	6026      	str	r6, [r4, #0]
 8005cfa:	463e      	mov	r6, r7
 8005cfc:	6165      	str	r5, [r4, #20]
 8005cfe:	eba5 0509 	sub.w	r5, r5, r9
 8005d02:	60a5      	str	r5, [r4, #8]
 8005d04:	42be      	cmp	r6, r7
 8005d06:	d900      	bls.n	8005d0a <__ssputs_r+0x72>
 8005d08:	463e      	mov	r6, r7
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	f000 faac 	bl	800626c <memmove>
 8005d14:	2000      	movs	r0, #0
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	1b9b      	subs	r3, r3, r6
 8005d1a:	60a3      	str	r3, [r4, #8]
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	4433      	add	r3, r6
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d26:	462a      	mov	r2, r5
 8005d28:	f000 fad8 	bl	80062dc <_realloc_r>
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d1e0      	bne.n	8005cf4 <__ssputs_r+0x5c>
 8005d32:	4650      	mov	r0, sl
 8005d34:	6921      	ldr	r1, [r4, #16]
 8005d36:	f7ff feb9 	bl	8005aac <_free_r>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	f8ca 3000 	str.w	r3, [sl]
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	e7e9      	b.n	8005d22 <__ssputs_r+0x8a>
	...

08005d50 <_svfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	4698      	mov	r8, r3
 8005d56:	898b      	ldrh	r3, [r1, #12]
 8005d58:	4607      	mov	r7, r0
 8005d5a:	061b      	lsls	r3, r3, #24
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	4614      	mov	r4, r2
 8005d60:	b09d      	sub	sp, #116	@ 0x74
 8005d62:	d510      	bpl.n	8005d86 <_svfiprintf_r+0x36>
 8005d64:	690b      	ldr	r3, [r1, #16]
 8005d66:	b973      	cbnz	r3, 8005d86 <_svfiprintf_r+0x36>
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	f7ff ff09 	bl	8005b80 <_malloc_r>
 8005d6e:	6028      	str	r0, [r5, #0]
 8005d70:	6128      	str	r0, [r5, #16]
 8005d72:	b930      	cbnz	r0, 8005d82 <_svfiprintf_r+0x32>
 8005d74:	230c      	movs	r3, #12
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	b01d      	add	sp, #116	@ 0x74
 8005d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d82:	2340      	movs	r3, #64	@ 0x40
 8005d84:	616b      	str	r3, [r5, #20]
 8005d86:	2300      	movs	r3, #0
 8005d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d90:	2330      	movs	r3, #48	@ 0x30
 8005d92:	f04f 0901 	mov.w	r9, #1
 8005d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005f34 <_svfiprintf_r+0x1e4>
 8005d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005da2:	4623      	mov	r3, r4
 8005da4:	469a      	mov	sl, r3
 8005da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005daa:	b10a      	cbz	r2, 8005db0 <_svfiprintf_r+0x60>
 8005dac:	2a25      	cmp	r2, #37	@ 0x25
 8005dae:	d1f9      	bne.n	8005da4 <_svfiprintf_r+0x54>
 8005db0:	ebba 0b04 	subs.w	fp, sl, r4
 8005db4:	d00b      	beq.n	8005dce <_svfiprintf_r+0x7e>
 8005db6:	465b      	mov	r3, fp
 8005db8:	4622      	mov	r2, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f7ff ff6b 	bl	8005c98 <__ssputs_r>
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f000 80a7 	beq.w	8005f16 <_svfiprintf_r+0x1c6>
 8005dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dca:	445a      	add	r2, fp
 8005dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dce:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 809f 	beq.w	8005f16 <_svfiprintf_r+0x1c6>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295
 8005dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005de2:	f10a 0a01 	add.w	sl, sl, #1
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	9307      	str	r3, [sp, #28]
 8005dea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dee:	931a      	str	r3, [sp, #104]	@ 0x68
 8005df0:	4654      	mov	r4, sl
 8005df2:	2205      	movs	r2, #5
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	484e      	ldr	r0, [pc, #312]	@ (8005f34 <_svfiprintf_r+0x1e4>)
 8005dfa:	f000 fa61 	bl	80062c0 <memchr>
 8005dfe:	9a04      	ldr	r2, [sp, #16]
 8005e00:	b9d8      	cbnz	r0, 8005e3a <_svfiprintf_r+0xea>
 8005e02:	06d0      	lsls	r0, r2, #27
 8005e04:	bf44      	itt	mi
 8005e06:	2320      	movmi	r3, #32
 8005e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e0c:	0711      	lsls	r1, r2, #28
 8005e0e:	bf44      	itt	mi
 8005e10:	232b      	movmi	r3, #43	@ 0x2b
 8005e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e16:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e1c:	d015      	beq.n	8005e4a <_svfiprintf_r+0xfa>
 8005e1e:	4654      	mov	r4, sl
 8005e20:	2000      	movs	r0, #0
 8005e22:	f04f 0c0a 	mov.w	ip, #10
 8005e26:	9a07      	ldr	r2, [sp, #28]
 8005e28:	4621      	mov	r1, r4
 8005e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e2e:	3b30      	subs	r3, #48	@ 0x30
 8005e30:	2b09      	cmp	r3, #9
 8005e32:	d94b      	bls.n	8005ecc <_svfiprintf_r+0x17c>
 8005e34:	b1b0      	cbz	r0, 8005e64 <_svfiprintf_r+0x114>
 8005e36:	9207      	str	r2, [sp, #28]
 8005e38:	e014      	b.n	8005e64 <_svfiprintf_r+0x114>
 8005e3a:	eba0 0308 	sub.w	r3, r0, r8
 8005e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	46a2      	mov	sl, r4
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	e7d2      	b.n	8005df0 <_svfiprintf_r+0xa0>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	9103      	str	r1, [sp, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bfbb      	ittet	lt
 8005e56:	425b      	neglt	r3, r3
 8005e58:	f042 0202 	orrlt.w	r2, r2, #2
 8005e5c:	9307      	strge	r3, [sp, #28]
 8005e5e:	9307      	strlt	r3, [sp, #28]
 8005e60:	bfb8      	it	lt
 8005e62:	9204      	strlt	r2, [sp, #16]
 8005e64:	7823      	ldrb	r3, [r4, #0]
 8005e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e68:	d10a      	bne.n	8005e80 <_svfiprintf_r+0x130>
 8005e6a:	7863      	ldrb	r3, [r4, #1]
 8005e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6e:	d132      	bne.n	8005ed6 <_svfiprintf_r+0x186>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	3402      	adds	r4, #2
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	9203      	str	r2, [sp, #12]
 8005e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e7e:	9305      	str	r3, [sp, #20]
 8005e80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f38 <_svfiprintf_r+0x1e8>
 8005e84:	2203      	movs	r2, #3
 8005e86:	4650      	mov	r0, sl
 8005e88:	7821      	ldrb	r1, [r4, #0]
 8005e8a:	f000 fa19 	bl	80062c0 <memchr>
 8005e8e:	b138      	cbz	r0, 8005ea0 <_svfiprintf_r+0x150>
 8005e90:	2240      	movs	r2, #64	@ 0x40
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	eba0 000a 	sub.w	r0, r0, sl
 8005e98:	4082      	lsls	r2, r0
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	3401      	adds	r4, #1
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea4:	2206      	movs	r2, #6
 8005ea6:	4825      	ldr	r0, [pc, #148]	@ (8005f3c <_svfiprintf_r+0x1ec>)
 8005ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005eac:	f000 fa08 	bl	80062c0 <memchr>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d036      	beq.n	8005f22 <_svfiprintf_r+0x1d2>
 8005eb4:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <_svfiprintf_r+0x1f0>)
 8005eb6:	bb1b      	cbnz	r3, 8005f00 <_svfiprintf_r+0x1b0>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	3307      	adds	r3, #7
 8005ebc:	f023 0307 	bic.w	r3, r3, #7
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	9303      	str	r3, [sp, #12]
 8005ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec6:	4433      	add	r3, r6
 8005ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eca:	e76a      	b.n	8005da2 <_svfiprintf_r+0x52>
 8005ecc:	460c      	mov	r4, r1
 8005ece:	2001      	movs	r0, #1
 8005ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ed4:	e7a8      	b.n	8005e28 <_svfiprintf_r+0xd8>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f04f 0c0a 	mov.w	ip, #10
 8005edc:	4619      	mov	r1, r3
 8005ede:	3401      	adds	r4, #1
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee8:	3a30      	subs	r2, #48	@ 0x30
 8005eea:	2a09      	cmp	r2, #9
 8005eec:	d903      	bls.n	8005ef6 <_svfiprintf_r+0x1a6>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0c6      	beq.n	8005e80 <_svfiprintf_r+0x130>
 8005ef2:	9105      	str	r1, [sp, #20]
 8005ef4:	e7c4      	b.n	8005e80 <_svfiprintf_r+0x130>
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	2301      	movs	r3, #1
 8005efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005efe:	e7f0      	b.n	8005ee2 <_svfiprintf_r+0x192>
 8005f00:	ab03      	add	r3, sp, #12
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	462a      	mov	r2, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <_svfiprintf_r+0x1f4>)
 8005f0a:	a904      	add	r1, sp, #16
 8005f0c:	f3af 8000 	nop.w
 8005f10:	1c42      	adds	r2, r0, #1
 8005f12:	4606      	mov	r6, r0
 8005f14:	d1d6      	bne.n	8005ec4 <_svfiprintf_r+0x174>
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	065b      	lsls	r3, r3, #25
 8005f1a:	f53f af2d 	bmi.w	8005d78 <_svfiprintf_r+0x28>
 8005f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f20:	e72c      	b.n	8005d7c <_svfiprintf_r+0x2c>
 8005f22:	ab03      	add	r3, sp, #12
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	462a      	mov	r2, r5
 8005f28:	4638      	mov	r0, r7
 8005f2a:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <_svfiprintf_r+0x1f4>)
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	f000 f87d 	bl	800602c <_printf_i>
 8005f32:	e7ed      	b.n	8005f10 <_svfiprintf_r+0x1c0>
 8005f34:	080064fa 	.word	0x080064fa
 8005f38:	08006500 	.word	0x08006500
 8005f3c:	08006504 	.word	0x08006504
 8005f40:	00000000 	.word	0x00000000
 8005f44:	08005c99 	.word	0x08005c99

08005f48 <_printf_common>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	4698      	mov	r8, r3
 8005f50:	688a      	ldr	r2, [r1, #8]
 8005f52:	690b      	ldr	r3, [r1, #16]
 8005f54:	4607      	mov	r7, r0
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bfb8      	it	lt
 8005f5a:	4613      	movlt	r3, r2
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f62:	460c      	mov	r4, r1
 8005f64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f68:	b10a      	cbz	r2, 8005f6e <_printf_common+0x26>
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	0699      	lsls	r1, r3, #26
 8005f72:	bf42      	ittt	mi
 8005f74:	6833      	ldrmi	r3, [r6, #0]
 8005f76:	3302      	addmi	r3, #2
 8005f78:	6033      	strmi	r3, [r6, #0]
 8005f7a:	6825      	ldr	r5, [r4, #0]
 8005f7c:	f015 0506 	ands.w	r5, r5, #6
 8005f80:	d106      	bne.n	8005f90 <_printf_common+0x48>
 8005f82:	f104 0a19 	add.w	sl, r4, #25
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	6832      	ldr	r2, [r6, #0]
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dc2b      	bgt.n	8005fe8 <_printf_common+0xa0>
 8005f90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	3b00      	subs	r3, #0
 8005f98:	bf18      	it	ne
 8005f9a:	2301      	movne	r3, #1
 8005f9c:	0692      	lsls	r2, r2, #26
 8005f9e:	d430      	bmi.n	8006002 <_printf_common+0xba>
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fa8:	47c8      	blx	r9
 8005faa:	3001      	adds	r0, #1
 8005fac:	d023      	beq.n	8005ff6 <_printf_common+0xae>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	6922      	ldr	r2, [r4, #16]
 8005fb2:	f003 0306 	and.w	r3, r3, #6
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	bf14      	ite	ne
 8005fba:	2500      	movne	r5, #0
 8005fbc:	6833      	ldreq	r3, [r6, #0]
 8005fbe:	f04f 0600 	mov.w	r6, #0
 8005fc2:	bf08      	it	eq
 8005fc4:	68e5      	ldreq	r5, [r4, #12]
 8005fc6:	f104 041a 	add.w	r4, r4, #26
 8005fca:	bf08      	it	eq
 8005fcc:	1aed      	subeq	r5, r5, r3
 8005fce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005fd2:	bf08      	it	eq
 8005fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bfc4      	itt	gt
 8005fdc:	1a9b      	subgt	r3, r3, r2
 8005fde:	18ed      	addgt	r5, r5, r3
 8005fe0:	42b5      	cmp	r5, r6
 8005fe2:	d11a      	bne.n	800601a <_printf_common+0xd2>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e008      	b.n	8005ffa <_printf_common+0xb2>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4652      	mov	r2, sl
 8005fec:	4641      	mov	r1, r8
 8005fee:	4638      	mov	r0, r7
 8005ff0:	47c8      	blx	r9
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d103      	bne.n	8005ffe <_printf_common+0xb6>
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	3501      	adds	r5, #1
 8006000:	e7c1      	b.n	8005f86 <_printf_common+0x3e>
 8006002:	2030      	movs	r0, #48	@ 0x30
 8006004:	18e1      	adds	r1, r4, r3
 8006006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006010:	4422      	add	r2, r4
 8006012:	3302      	adds	r3, #2
 8006014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006018:	e7c2      	b.n	8005fa0 <_printf_common+0x58>
 800601a:	2301      	movs	r3, #1
 800601c:	4622      	mov	r2, r4
 800601e:	4641      	mov	r1, r8
 8006020:	4638      	mov	r0, r7
 8006022:	47c8      	blx	r9
 8006024:	3001      	adds	r0, #1
 8006026:	d0e6      	beq.n	8005ff6 <_printf_common+0xae>
 8006028:	3601      	adds	r6, #1
 800602a:	e7d9      	b.n	8005fe0 <_printf_common+0x98>

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	4691      	mov	r9, r2
 8006034:	2f78      	cmp	r7, #120	@ 0x78
 8006036:	4680      	mov	r8, r0
 8006038:	460c      	mov	r4, r1
 800603a:	469a      	mov	sl, r3
 800603c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800603e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	@ 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d3 	beq.w	80061f4 <_printf_i+0x1c8>
 800604e:	2f58      	cmp	r7, #88	@ 0x58
 8006050:	f000 80ba 	beq.w	80061c8 <_printf_i+0x19c>
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	@ (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061db 	.word	0x080061db
 800609c:	08006103 	.word	0x08006103
 80060a0:	08006195 	.word	0x08006195
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	080061fd 	.word	0x080061fd
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006103 	.word	0x08006103
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	0800619d 	.word	0x0800619d
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e09e      	b.n	8006216 <_printf_i+0x1ea>
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	6031      	str	r1, [r6, #0]
 80060e0:	0606      	lsls	r6, r0, #24
 80060e2:	d501      	bpl.n	80060e8 <_printf_i+0xbc>
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	e003      	b.n	80060f0 <_printf_i+0xc4>
 80060e8:	0645      	lsls	r5, r0, #25
 80060ea:	d5fb      	bpl.n	80060e4 <_printf_i+0xb8>
 80060ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	da03      	bge.n	80060fc <_printf_i+0xd0>
 80060f4:	232d      	movs	r3, #45	@ 0x2d
 80060f6:	426d      	negs	r5, r5
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060fc:	230a      	movs	r3, #10
 80060fe:	4859      	ldr	r0, [pc, #356]	@ (8006264 <_printf_i+0x238>)
 8006100:	e011      	b.n	8006126 <_printf_i+0xfa>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	0608      	lsls	r0, r1, #24
 8006108:	f853 5b04 	ldr.w	r5, [r3], #4
 800610c:	d402      	bmi.n	8006114 <_printf_i+0xe8>
 800610e:	0649      	lsls	r1, r1, #25
 8006110:	bf48      	it	mi
 8006112:	b2ad      	uxthmi	r5, r5
 8006114:	2f6f      	cmp	r7, #111	@ 0x6f
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	bf14      	ite	ne
 800611a:	230a      	movne	r3, #10
 800611c:	2308      	moveq	r3, #8
 800611e:	4851      	ldr	r0, [pc, #324]	@ (8006264 <_printf_i+0x238>)
 8006120:	2100      	movs	r1, #0
 8006122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	2e00      	cmp	r6, #0
 800612a:	bfa8      	it	ge
 800612c:	6821      	ldrge	r1, [r4, #0]
 800612e:	60a6      	str	r6, [r4, #8]
 8006130:	bfa4      	itt	ge
 8006132:	f021 0104 	bicge.w	r1, r1, #4
 8006136:	6021      	strge	r1, [r4, #0]
 8006138:	b90d      	cbnz	r5, 800613e <_printf_i+0x112>
 800613a:	2e00      	cmp	r6, #0
 800613c:	d04b      	beq.n	80061d6 <_printf_i+0x1aa>
 800613e:	4616      	mov	r6, r2
 8006140:	fbb5 f1f3 	udiv	r1, r5, r3
 8006144:	fb03 5711 	mls	r7, r3, r1, r5
 8006148:	5dc7      	ldrb	r7, [r0, r7]
 800614a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614e:	462f      	mov	r7, r5
 8006150:	42bb      	cmp	r3, r7
 8006152:	460d      	mov	r5, r1
 8006154:	d9f4      	bls.n	8006140 <_printf_i+0x114>
 8006156:	2b08      	cmp	r3, #8
 8006158:	d10b      	bne.n	8006172 <_printf_i+0x146>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	07df      	lsls	r7, r3, #31
 800615e:	d508      	bpl.n	8006172 <_printf_i+0x146>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	6861      	ldr	r1, [r4, #4]
 8006164:	4299      	cmp	r1, r3
 8006166:	bfde      	ittt	le
 8006168:	2330      	movle	r3, #48	@ 0x30
 800616a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006172:	1b92      	subs	r2, r2, r6
 8006174:	6122      	str	r2, [r4, #16]
 8006176:	464b      	mov	r3, r9
 8006178:	4621      	mov	r1, r4
 800617a:	4640      	mov	r0, r8
 800617c:	f8cd a000 	str.w	sl, [sp]
 8006180:	aa03      	add	r2, sp, #12
 8006182:	f7ff fee1 	bl	8005f48 <_printf_common>
 8006186:	3001      	adds	r0, #1
 8006188:	d14a      	bne.n	8006220 <_printf_i+0x1f4>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	b004      	add	sp, #16
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	f043 0320 	orr.w	r3, r3, #32
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	2778      	movs	r7, #120	@ 0x78
 800619e:	4832      	ldr	r0, [pc, #200]	@ (8006268 <_printf_i+0x23c>)
 80061a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	6831      	ldr	r1, [r6, #0]
 80061a8:	061f      	lsls	r7, r3, #24
 80061aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80061ae:	d402      	bmi.n	80061b6 <_printf_i+0x18a>
 80061b0:	065f      	lsls	r7, r3, #25
 80061b2:	bf48      	it	mi
 80061b4:	b2ad      	uxthmi	r5, r5
 80061b6:	6031      	str	r1, [r6, #0]
 80061b8:	07d9      	lsls	r1, r3, #31
 80061ba:	bf44      	itt	mi
 80061bc:	f043 0320 	orrmi.w	r3, r3, #32
 80061c0:	6023      	strmi	r3, [r4, #0]
 80061c2:	b11d      	cbz	r5, 80061cc <_printf_i+0x1a0>
 80061c4:	2310      	movs	r3, #16
 80061c6:	e7ab      	b.n	8006120 <_printf_i+0xf4>
 80061c8:	4826      	ldr	r0, [pc, #152]	@ (8006264 <_printf_i+0x238>)
 80061ca:	e7e9      	b.n	80061a0 <_printf_i+0x174>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	e7f6      	b.n	80061c4 <_printf_i+0x198>
 80061d6:	4616      	mov	r6, r2
 80061d8:	e7bd      	b.n	8006156 <_printf_i+0x12a>
 80061da:	6833      	ldr	r3, [r6, #0]
 80061dc:	6825      	ldr	r5, [r4, #0]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6961      	ldr	r1, [r4, #20]
 80061e2:	6030      	str	r0, [r6, #0]
 80061e4:	062e      	lsls	r6, r5, #24
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	d501      	bpl.n	80061ee <_printf_i+0x1c2>
 80061ea:	6019      	str	r1, [r3, #0]
 80061ec:	e002      	b.n	80061f4 <_printf_i+0x1c8>
 80061ee:	0668      	lsls	r0, r5, #25
 80061f0:	d5fb      	bpl.n	80061ea <_printf_i+0x1be>
 80061f2:	8019      	strh	r1, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	4616      	mov	r6, r2
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	e7bc      	b.n	8006176 <_printf_i+0x14a>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	2100      	movs	r1, #0
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	6862      	ldr	r2, [r4, #4]
 8006208:	4630      	mov	r0, r6
 800620a:	f000 f859 	bl	80062c0 <memchr>
 800620e:	b108      	cbz	r0, 8006214 <_printf_i+0x1e8>
 8006210:	1b80      	subs	r0, r0, r6
 8006212:	6060      	str	r0, [r4, #4]
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	2300      	movs	r3, #0
 800621a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621e:	e7aa      	b.n	8006176 <_printf_i+0x14a>
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	47d0      	blx	sl
 800622a:	3001      	adds	r0, #1
 800622c:	d0ad      	beq.n	800618a <_printf_i+0x15e>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	079b      	lsls	r3, r3, #30
 8006232:	d413      	bmi.n	800625c <_printf_i+0x230>
 8006234:	68e0      	ldr	r0, [r4, #12]
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	4298      	cmp	r0, r3
 800623a:	bfb8      	it	lt
 800623c:	4618      	movlt	r0, r3
 800623e:	e7a6      	b.n	800618e <_printf_i+0x162>
 8006240:	2301      	movs	r3, #1
 8006242:	4632      	mov	r2, r6
 8006244:	4649      	mov	r1, r9
 8006246:	4640      	mov	r0, r8
 8006248:	47d0      	blx	sl
 800624a:	3001      	adds	r0, #1
 800624c:	d09d      	beq.n	800618a <_printf_i+0x15e>
 800624e:	3501      	adds	r5, #1
 8006250:	68e3      	ldr	r3, [r4, #12]
 8006252:	9903      	ldr	r1, [sp, #12]
 8006254:	1a5b      	subs	r3, r3, r1
 8006256:	42ab      	cmp	r3, r5
 8006258:	dcf2      	bgt.n	8006240 <_printf_i+0x214>
 800625a:	e7eb      	b.n	8006234 <_printf_i+0x208>
 800625c:	2500      	movs	r5, #0
 800625e:	f104 0619 	add.w	r6, r4, #25
 8006262:	e7f5      	b.n	8006250 <_printf_i+0x224>
 8006264:	0800650b 	.word	0x0800650b
 8006268:	0800651c 	.word	0x0800651c

0800626c <memmove>:
 800626c:	4288      	cmp	r0, r1
 800626e:	b510      	push	{r4, lr}
 8006270:	eb01 0402 	add.w	r4, r1, r2
 8006274:	d902      	bls.n	800627c <memmove+0x10>
 8006276:	4284      	cmp	r4, r0
 8006278:	4623      	mov	r3, r4
 800627a:	d807      	bhi.n	800628c <memmove+0x20>
 800627c:	1e43      	subs	r3, r0, #1
 800627e:	42a1      	cmp	r1, r4
 8006280:	d008      	beq.n	8006294 <memmove+0x28>
 8006282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800628a:	e7f8      	b.n	800627e <memmove+0x12>
 800628c:	4601      	mov	r1, r0
 800628e:	4402      	add	r2, r0
 8006290:	428a      	cmp	r2, r1
 8006292:	d100      	bne.n	8006296 <memmove+0x2a>
 8006294:	bd10      	pop	{r4, pc}
 8006296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800629a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800629e:	e7f7      	b.n	8006290 <memmove+0x24>

080062a0 <_sbrk_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	2300      	movs	r3, #0
 80062a4:	4d05      	ldr	r5, [pc, #20]	@ (80062bc <_sbrk_r+0x1c>)
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fa fc34 	bl	8000b18 <_sbrk>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_sbrk_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_sbrk_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20001e90 	.word	0x20001e90

080062c0 <memchr>:
 80062c0:	4603      	mov	r3, r0
 80062c2:	b510      	push	{r4, lr}
 80062c4:	b2c9      	uxtb	r1, r1
 80062c6:	4402      	add	r2, r0
 80062c8:	4293      	cmp	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	d101      	bne.n	80062d2 <memchr+0x12>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e003      	b.n	80062da <memchr+0x1a>
 80062d2:	7804      	ldrb	r4, [r0, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	428c      	cmp	r4, r1
 80062d8:	d1f6      	bne.n	80062c8 <memchr+0x8>
 80062da:	bd10      	pop	{r4, pc}

080062dc <_realloc_r>:
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	4680      	mov	r8, r0
 80062e2:	4615      	mov	r5, r2
 80062e4:	460c      	mov	r4, r1
 80062e6:	b921      	cbnz	r1, 80062f2 <_realloc_r+0x16>
 80062e8:	4611      	mov	r1, r2
 80062ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	f7ff bc47 	b.w	8005b80 <_malloc_r>
 80062f2:	b92a      	cbnz	r2, 8006300 <_realloc_r+0x24>
 80062f4:	f7ff fbda 	bl	8005aac <_free_r>
 80062f8:	2400      	movs	r4, #0
 80062fa:	4620      	mov	r0, r4
 80062fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006300:	f000 f81a 	bl	8006338 <_malloc_usable_size_r>
 8006304:	4285      	cmp	r5, r0
 8006306:	4606      	mov	r6, r0
 8006308:	d802      	bhi.n	8006310 <_realloc_r+0x34>
 800630a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800630e:	d8f4      	bhi.n	80062fa <_realloc_r+0x1e>
 8006310:	4629      	mov	r1, r5
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fc34 	bl	8005b80 <_malloc_r>
 8006318:	4607      	mov	r7, r0
 800631a:	2800      	cmp	r0, #0
 800631c:	d0ec      	beq.n	80062f8 <_realloc_r+0x1c>
 800631e:	42b5      	cmp	r5, r6
 8006320:	462a      	mov	r2, r5
 8006322:	4621      	mov	r1, r4
 8006324:	bf28      	it	cs
 8006326:	4632      	movcs	r2, r6
 8006328:	f7ff fbb2 	bl	8005a90 <memcpy>
 800632c:	4621      	mov	r1, r4
 800632e:	4640      	mov	r0, r8
 8006330:	f7ff fbbc 	bl	8005aac <_free_r>
 8006334:	463c      	mov	r4, r7
 8006336:	e7e0      	b.n	80062fa <_realloc_r+0x1e>

08006338 <_malloc_usable_size_r>:
 8006338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800633c:	1f18      	subs	r0, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfbc      	itt	lt
 8006342:	580b      	ldrlt	r3, [r1, r0]
 8006344:	18c0      	addlt	r0, r0, r3
 8006346:	4770      	bx	lr

08006348 <_init>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr

08006354 <_fini>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr
